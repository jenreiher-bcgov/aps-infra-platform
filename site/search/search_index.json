{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6","title":"Welcome"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"glossary/","text":"Glossary \u00b6 Term Definition Access Control Access control is a set of security measures that regulate who can access a system, services, data, or resource. Access control policies use authentication and authorization to verify users and enable access. Access Token Access tokens enable clients to securely call protected APIs. The APIs use the access tokens to perform authentication and authorization. The information in the access token verifies that a user is entitled to access an API. API An Application Programming Interface (API) is a software-to-software interface that provides a secure and standardized way for applications to communicate with each other to deliver requested data without user intervention. API Consumer API Consumers (organizations providing services to end-users) use the APIs available through the APS Platform in the delivery of their services. API Consumers integrate the APIs into their applications. API Directory The API Directory is a centralized repository where API Providers can securely publish their APIs and API Consumers can find and request access to the published APIs. The APIs in the Directory are available to anyone with access to the APS Portal. API Gateway The API Gateway is a service that facilitates the management and execution of APIs by routing requests. It extends the capabilities of APIs with the use of controls such as authentication, authorization, rate limiting, and IP limitations allowing systems to be safely and efficiently integrated. API Key An API Key is a unique identifier (a random series of letters and numbers) used to authenticate an application accessing a specific API. The application includes the Key in each API request, and the API uses the Key to identify the application and authorize the request. The API Key is used in combination with an API Secret. API Secret The API Secret is a software-level credential (password) used to securely authenticate an application or user. The Secret is included in all API requests to identify the Consumer. The API Secret is used in combination with an API Key. The Secret is known only to the Consumer and the API gateway. It is only displayed upon creation and must be recorded by the Consumer. API Program Services (APS) API Program Services (APS) is the team responsible for delivering services that enable ongoing access to public sector data by providing support for managing APIs. APS ensures the efficient development and operation of APIs through the APS Platform and API Services Portal. API Provider An API Provider, usually a developer, creates, publishes, operates, and maintains APIs in the APS Management Platform. APS Platform The APS Platform is the APS backend that enables data providers to manage their APIs and deliver services using the Kong API Gateway Community edition and a combination of tools to provide API security, authentication, routing, and publishing. API Services Portal The API Services Portal is the access point for API Providers and API Consumers to publish, discover, and manage APIs. The APS Portal enables: - API Providers to build, configure, and share their APIs publicly or privately - API Consumers to setup applications, discover APIs available for integration, and send access requests Authentication Authentication is a security process for verifying the identity of a user or device before allowing access to a system, resource, or function. Authentication validates that a user or system is who they claim to be. Authorization Authorization is a security process for providing a user or device with access to a requested system, resource, or function based on permissions. Authorization is provided only after a user or device has been authenticated. Environment An environment in software development is the collection of stages that an application moves through during development and include development, testing, staging and production. - The development environment is the workspace for developers to design, program, debug, change, etc. an application or system. - Test teams use the testing environment to conduct tests and ensure the quality and functionality of the application or system. Testers can identify bugs, errors, or defects and review fixes. - A staging environment is a replica of a production environment with the purpose of testing code, builds, and updates to ensure quality in a production-like environment before deploying the application or system to the live (production) environment. - Production is the environment where the application or system is in operation and available to end-users. Kong Gateway The Kong Gateway Service is a data communication service that acts as middleware facilitating the transmission of requests between a client and an application using an API. Namespace A namespace is a collection of Kong Gateway Services and Routes that are managed independently. Organization An organization is any ministry, crown corporation, or agency within the B.C. Government. Organization Administrator An Organization Administrator (Org Admin) is the user responsible for monitoring and managing all APIs for a specific organization (ministry, crown corporation, or agency) on the APS portal. The Org Admins primary responsibility is to approve namespaces and enable publishing on the namespace to allow an API provider to publish an API to the APS directory. Publish Publishing APIs is the process by which an API Provider makes their API publicly available in the API Directory for discovery by API Consumers. Role A role is a group of predefined access permissions assigned to a user. Route A route is a means of exposing a service to users. It is the path used to send requests to its respective service after reaching the Gateway. A single service can have multiple routes. Service A service represents an external upstream API or microservice consisting of a URL, which listens for incoming requests. Scope Scope is a method used to specify authorization, or a set of permissions that grant access to specified systems and actions. Scopes can be applied to both users and service accounts. For example, the API Gateway Namespace.View scope allows read-only access to a namespace; therefore, a user with Namespace.View cannot approve API access requests. To approve an API access request, the user requires the Access.Manage scope, which gives permission to approve or reject access requests. Shared IdP An Identity Provider (IdP) is a service that stores, maintains, and manages digital identities to authenticate users logging into an application. APS uses a Shared IdP, which is a centralized BC Government IdP (SSO Gold-tier Keycloak cluster) that manages client credentials and user access. The Shared IdP enables entities (APIs, applications, websites, and services) to access secured digital identities in order to control authentication and authorization. By using a Shared IdP, APS enables API providers to delegate the responsibility of authentication and authorization to the Shared IdP while still retaining a high level of security. If you have comments or feedback on any of these definitions, please submit a Data Systems & Services ticket .","title":"Glossary"},{"location":"glossary/#glossary","text":"Term Definition Access Control Access control is a set of security measures that regulate who can access a system, services, data, or resource. Access control policies use authentication and authorization to verify users and enable access. Access Token Access tokens enable clients to securely call protected APIs. The APIs use the access tokens to perform authentication and authorization. The information in the access token verifies that a user is entitled to access an API. API An Application Programming Interface (API) is a software-to-software interface that provides a secure and standardized way for applications to communicate with each other to deliver requested data without user intervention. API Consumer API Consumers (organizations providing services to end-users) use the APIs available through the APS Platform in the delivery of their services. API Consumers integrate the APIs into their applications. API Directory The API Directory is a centralized repository where API Providers can securely publish their APIs and API Consumers can find and request access to the published APIs. The APIs in the Directory are available to anyone with access to the APS Portal. API Gateway The API Gateway is a service that facilitates the management and execution of APIs by routing requests. It extends the capabilities of APIs with the use of controls such as authentication, authorization, rate limiting, and IP limitations allowing systems to be safely and efficiently integrated. API Key An API Key is a unique identifier (a random series of letters and numbers) used to authenticate an application accessing a specific API. The application includes the Key in each API request, and the API uses the Key to identify the application and authorize the request. The API Key is used in combination with an API Secret. API Secret The API Secret is a software-level credential (password) used to securely authenticate an application or user. The Secret is included in all API requests to identify the Consumer. The API Secret is used in combination with an API Key. The Secret is known only to the Consumer and the API gateway. It is only displayed upon creation and must be recorded by the Consumer. API Program Services (APS) API Program Services (APS) is the team responsible for delivering services that enable ongoing access to public sector data by providing support for managing APIs. APS ensures the efficient development and operation of APIs through the APS Platform and API Services Portal. API Provider An API Provider, usually a developer, creates, publishes, operates, and maintains APIs in the APS Management Platform. APS Platform The APS Platform is the APS backend that enables data providers to manage their APIs and deliver services using the Kong API Gateway Community edition and a combination of tools to provide API security, authentication, routing, and publishing. API Services Portal The API Services Portal is the access point for API Providers and API Consumers to publish, discover, and manage APIs. The APS Portal enables: - API Providers to build, configure, and share their APIs publicly or privately - API Consumers to setup applications, discover APIs available for integration, and send access requests Authentication Authentication is a security process for verifying the identity of a user or device before allowing access to a system, resource, or function. Authentication validates that a user or system is who they claim to be. Authorization Authorization is a security process for providing a user or device with access to a requested system, resource, or function based on permissions. Authorization is provided only after a user or device has been authenticated. Environment An environment in software development is the collection of stages that an application moves through during development and include development, testing, staging and production. - The development environment is the workspace for developers to design, program, debug, change, etc. an application or system. - Test teams use the testing environment to conduct tests and ensure the quality and functionality of the application or system. Testers can identify bugs, errors, or defects and review fixes. - A staging environment is a replica of a production environment with the purpose of testing code, builds, and updates to ensure quality in a production-like environment before deploying the application or system to the live (production) environment. - Production is the environment where the application or system is in operation and available to end-users. Kong Gateway The Kong Gateway Service is a data communication service that acts as middleware facilitating the transmission of requests between a client and an application using an API. Namespace A namespace is a collection of Kong Gateway Services and Routes that are managed independently. Organization An organization is any ministry, crown corporation, or agency within the B.C. Government. Organization Administrator An Organization Administrator (Org Admin) is the user responsible for monitoring and managing all APIs for a specific organization (ministry, crown corporation, or agency) on the APS portal. The Org Admins primary responsibility is to approve namespaces and enable publishing on the namespace to allow an API provider to publish an API to the APS directory. Publish Publishing APIs is the process by which an API Provider makes their API publicly available in the API Directory for discovery by API Consumers. Role A role is a group of predefined access permissions assigned to a user. Route A route is a means of exposing a service to users. It is the path used to send requests to its respective service after reaching the Gateway. A single service can have multiple routes. Service A service represents an external upstream API or microservice consisting of a URL, which listens for incoming requests. Scope Scope is a method used to specify authorization, or a set of permissions that grant access to specified systems and actions. Scopes can be applied to both users and service accounts. For example, the API Gateway Namespace.View scope allows read-only access to a namespace; therefore, a user with Namespace.View cannot approve API access requests. To approve an API access request, the user requires the Access.Manage scope, which gives permission to approve or reject access requests. Shared IdP An Identity Provider (IdP) is a service that stores, maintains, and manages digital identities to authenticate users logging into an application. APS uses a Shared IdP, which is a centralized BC Government IdP (SSO Gold-tier Keycloak cluster) that manages client credentials and user access. The Shared IdP enables entities (APIs, applications, websites, and services) to access secured digital identities in order to control authentication and authorization. By using a Shared IdP, APS enables API providers to delegate the responsibility of authentication and authorization to the Shared IdP while still retaining a high level of security. If you have comments or feedback on any of these definitions, please submit a Data Systems & Services ticket .","title":"Glossary"},{"location":"personas/","text":"Personas \u00b6","title":"Personas"},{"location":"personas/#personas","text":"","title":"Personas"},{"location":"presentations/","text":"Presentations \u00b6 !ref target=\"blank\" text=\"ARD and Waiting Room\" May 2023 : Presented a Waiting Room solution in our Sprint Review. !ref target=\"blank\" text=\"Client-Hosted Kong Gateway\" Mar 2023 : Presented a proposed solution in our Sprint Review for supporting APS in the Cloud or Emerald platform. !ref target=\"blank\" text=\"Road to Gold\" Jan 2022 : Presented our journey from the Openshift Silver cluster to Gold cluster","title":"Presentations"},{"location":"presentations/#presentations","text":"!ref target=\"blank\" text=\"ARD and Waiting Room\" May 2023 : Presented a Waiting Room solution in our Sprint Review. !ref target=\"blank\" text=\"Client-Hosted Kong Gateway\" Mar 2023 : Presented a proposed solution in our Sprint Review for supporting APS in the Cloud or Emerald platform. !ref target=\"blank\" text=\"Road to Gold\" Jan 2022 : Presented our journey from the Openshift Silver cluster to Gold cluster","title":"Presentations"},{"location":"resources/","text":"Resources \u00b6 The following resources are offered for guidance on APIs with the purpose of providing information on how to design APIs, follow good patterns, and ensure consistency and structure. !ref target=\"blank\" text=\"Government of Canada API Store\" The API store for the Government of Canada is a one-stop shop for APIs to build applications and services using government data and information. The API Store is the central repository of Federal government department APIs. The API Store enables discovery of APIs, ensures consistent security, provides performance and analytics information, and offers guidance on API life cycle management. !ref target=\"blank\" text=\"BC Government API Guidelines (DevHub)\" The purpose of these guidelines is to promote consistency and provide guidance around the use of Application Programming Interfaces (APIs) across the BC government, and to enable exchange and integration of data between systems, agencies, businesses and citizens. !ref target=\"blank\" text=\"OpenAPI Initiative\" The OpenAPI Initiative guide\u2019s focus is on HTTP-based API designers and writers who want to have their API formalized in an OpenAPI Description document. The description document is a standard, programming language-agnostic interface description for HTTP APIs based on the OpenAPI Specification (OAS). If you have comments or feedback on any of these resources, please submit a Data Systems & Services ticket .","title":"Resources"},{"location":"resources/#resources","text":"The following resources are offered for guidance on APIs with the purpose of providing information on how to design APIs, follow good patterns, and ensure consistency and structure. !ref target=\"blank\" text=\"Government of Canada API Store\" The API store for the Government of Canada is a one-stop shop for APIs to build applications and services using government data and information. The API Store is the central repository of Federal government department APIs. The API Store enables discovery of APIs, ensures consistent security, provides performance and analytics information, and offers guidance on API life cycle management. !ref target=\"blank\" text=\"BC Government API Guidelines (DevHub)\" The purpose of these guidelines is to promote consistency and provide guidance around the use of Application Programming Interfaces (APIs) across the BC government, and to enable exchange and integration of data between systems, agencies, businesses and citizens. !ref target=\"blank\" text=\"OpenAPI Initiative\" The OpenAPI Initiative guide\u2019s focus is on HTTP-based API designers and writers who want to have their API formalized in an OpenAPI Description document. The description document is a standard, programming language-agnostic interface description for HTTP APIs based on the OpenAPI Specification (OAS). If you have comments or feedback on any of these resources, please submit a Data Systems & Services ticket .","title":"Resources"},{"location":"gateway/AVAILABLE-PLUGINS/","text":"Supported Plugins \u00b6 Current list of plugins available on the API Gateway. NOTE: The httplog is not available for individual teams to use as it is used at a global level to feed logs to other systems for audit/monitoring/etc. If there are other plugins that you would like to have added to the Gateway, please reach out to us at our Rocket.Chat channel #aps-ops . For information about execution order, see: https://docs.konghq.com/gateway/latest/plugin-development/custom-logic/#plugins-execution-order 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \"available_on_server\" : { \"basic-auth\" : true , \"ip-restriction\" : true , \"request-transformer\" : true , \"response-transformer\" : true , \"request-size-limiting\" : true , \"rate-limiting\" : true , \"response-ratelimiting\" : true , \"syslog\" : true , \"loggly\" : true , \"datadog\" : true , \"ldap-auth\" : true , \"statsd\" : true , \"bot-detection\" : true , \"aws-lambda\" : true , \"request-termination\" : true , \"azure-functions\" : true , \"zipkin\" : true , \"pre-function\" : true , \"post-function\" : true , \"prometheus\" : true , \"proxy-cache\" : true , \"session\" : true , \"acme\" : true , \"grpc-web\" : true , \"grpc-gateway\" : true , \"kong-spec-expose\" : true , \"jwt-keycloak\" : true , \"referer\" : true , \"bcgov-gwa-endpoint\" : true , \"gwa-ip-anonymity\" : true , \"oidc\" : true , \"jwt\" : true , \"acl\" : true , \"correlation-id\" : true , \"cors\" : true , \"oauth2\" : true , \"tcp-log\" : true , \"udp-log\" : true , \"file-log\" : true , \"http-log\" : true , \"key-auth\" : true , \"hmac-auth\" : true } Plugin Priorities \u00b6 https://docs.konghq.com/gateway/2.8.x/plugin-development/custom-logic/#plugins-execution-order","title":"Supported Plugins"},{"location":"gateway/AVAILABLE-PLUGINS/#supported-plugins","text":"Current list of plugins available on the API Gateway. NOTE: The httplog is not available for individual teams to use as it is used at a global level to feed logs to other systems for audit/monitoring/etc. If there are other plugins that you would like to have added to the Gateway, please reach out to us at our Rocket.Chat channel #aps-ops . For information about execution order, see: https://docs.konghq.com/gateway/latest/plugin-development/custom-logic/#plugins-execution-order 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \"available_on_server\" : { \"basic-auth\" : true , \"ip-restriction\" : true , \"request-transformer\" : true , \"response-transformer\" : true , \"request-size-limiting\" : true , \"rate-limiting\" : true , \"response-ratelimiting\" : true , \"syslog\" : true , \"loggly\" : true , \"datadog\" : true , \"ldap-auth\" : true , \"statsd\" : true , \"bot-detection\" : true , \"aws-lambda\" : true , \"request-termination\" : true , \"azure-functions\" : true , \"zipkin\" : true , \"pre-function\" : true , \"post-function\" : true , \"prometheus\" : true , \"proxy-cache\" : true , \"session\" : true , \"acme\" : true , \"grpc-web\" : true , \"grpc-gateway\" : true , \"kong-spec-expose\" : true , \"jwt-keycloak\" : true , \"referer\" : true , \"bcgov-gwa-endpoint\" : true , \"gwa-ip-anonymity\" : true , \"oidc\" : true , \"jwt\" : true , \"acl\" : true , \"correlation-id\" : true , \"cors\" : true , \"oauth2\" : true , \"tcp-log\" : true , \"udp-log\" : true , \"file-log\" : true , \"http-log\" : true , \"key-auth\" : true , \"hmac-auth\" : true }","title":"Supported Plugins"},{"location":"gateway/AVAILABLE-PLUGINS/#plugin-priorities","text":"https://docs.konghq.com/gateway/2.8.x/plugin-development/custom-logic/#plugins-execution-order","title":"Plugin Priorities"},{"location":"gateway/COMMON-CONFIG/","text":"Common Controls \u00b6 The following are sample Gateway controls for common scenarios. Returning an HTTP Redirect \u00b6 1 2 3 4 5 6 plugins: - name: pre-function tags: [ _NS_ ] config: access: - \"kong.response.exit(307, 'site moved - redirecting...', {['Location'] = 'https://my-new-url.site'})\" Request Termination \u00b6 1 2 3 4 5 6 plugins: - name: request-termination tags: [ _NS_ ] config: status_code: 400 message: API not implemented yet! Adding Headers For Best Security Practices \u00b6 1 2 3 4 5 6 7 8 9 10 11 plugins: - name: response-transformer tags: [ _NS_ ] config: add: headers: - \"X-Frame-Options: DENY\" - \"X-XSS-Protection: 1; mode=block\" - \"X-Content-Type-Options: nosniff\" - \"Strict-Transport-Security: max-age=31536000\" - \"Content-Security-Policy: script-src 'self'\" For further information on individual headers, see: https://owasp.org/www-project-secure-headers/ Rate Limit \u00b6 Option 1 - Using a Distributed Cache \u00b6 This provides the most accurate because it uses a centralized Cache that all Kong nodes use. The downside is that there is a 100-200ms latency. 1 2 3 4 5 6 7 8 9 10 11 12 13 plugins: - name: rate-limiting tags: [ _NS_ ] config: fault_tolerant: true hide_client_headers: false limit_by: ip minute: 30000 second: null hour: null day: null month: null year: null Option 2 - Node Local Caching \u00b6 This provides the fastest rate limiting option, with minimal latency (~1ms). The downside is that it is local to each node so calculating the actual load on your upstream is a function of the number of nodes. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 plugins: - name: rate-limiting tags: [ _NS_ ] config: policy: local fault_tolerant: true hide_client_headers: false limit_by: ip minute: 30000 second: null hour: null day: null month: null year: null Two-tiered access setup \u00b6 The key-auth and jwt-keycloak plugins support the concept of allowing \"anonymous\" access, which allows you to define a \"free\" service which might have limits around it (like only allowing 100 requests/minute), and then an \"elevated\" access where the Consumer would get an improved level of service, such as higher rate limits. There is a global \"anonymous\" consumer that is identified as \"ce26955a-cf08-4907-9427-12d01c8bd94c\" in both our Test and Production environments. To enable anonymous access to your API, update your plugin configuration with: key-auth \u00b6 1 2 3 4 5 - name: key-auth tags: [ _NS_ ] config: ... anonymous: ce26955a-cf08-4907-9427-12d01c8bd94c jwt-keycloak \u00b6 1 2 3 4 5 6 7 8 - name: jwt-keycloak tags: [ _NS_ ] config: ... consumer_match: true consumer_match_ignore_not_found: false consumer_match_claim_custom_id: false anonymous: ce26955a-cf08-4907-9427-12d01c8bd94c","title":"Common Controls"},{"location":"gateway/COMMON-CONFIG/#common-controls","text":"The following are sample Gateway controls for common scenarios.","title":"Common Controls"},{"location":"gateway/COMMON-CONFIG/#returning-an-http-redirect","text":"1 2 3 4 5 6 plugins: - name: pre-function tags: [ _NS_ ] config: access: - \"kong.response.exit(307, 'site moved - redirecting...', {['Location'] = 'https://my-new-url.site'})\"","title":"Returning an HTTP Redirect"},{"location":"gateway/COMMON-CONFIG/#request-termination","text":"1 2 3 4 5 6 plugins: - name: request-termination tags: [ _NS_ ] config: status_code: 400 message: API not implemented yet!","title":"Request Termination"},{"location":"gateway/COMMON-CONFIG/#adding-headers-for-best-security-practices","text":"1 2 3 4 5 6 7 8 9 10 11 plugins: - name: response-transformer tags: [ _NS_ ] config: add: headers: - \"X-Frame-Options: DENY\" - \"X-XSS-Protection: 1; mode=block\" - \"X-Content-Type-Options: nosniff\" - \"Strict-Transport-Security: max-age=31536000\" - \"Content-Security-Policy: script-src 'self'\" For further information on individual headers, see: https://owasp.org/www-project-secure-headers/","title":"Adding Headers For Best Security Practices"},{"location":"gateway/COMMON-CONFIG/#rate-limit","text":"","title":"Rate Limit"},{"location":"gateway/COMMON-CONFIG/#option-1-using-a-distributed-cache","text":"This provides the most accurate because it uses a centralized Cache that all Kong nodes use. The downside is that there is a 100-200ms latency. 1 2 3 4 5 6 7 8 9 10 11 12 13 plugins: - name: rate-limiting tags: [ _NS_ ] config: fault_tolerant: true hide_client_headers: false limit_by: ip minute: 30000 second: null hour: null day: null month: null year: null","title":"Option 1 - Using a Distributed Cache"},{"location":"gateway/COMMON-CONFIG/#option-2-node-local-caching","text":"This provides the fastest rate limiting option, with minimal latency (~1ms). The downside is that it is local to each node so calculating the actual load on your upstream is a function of the number of nodes. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 plugins: - name: rate-limiting tags: [ _NS_ ] config: policy: local fault_tolerant: true hide_client_headers: false limit_by: ip minute: 30000 second: null hour: null day: null month: null year: null","title":"Option 2 - Node Local Caching"},{"location":"gateway/COMMON-CONFIG/#two-tiered-access-setup","text":"The key-auth and jwt-keycloak plugins support the concept of allowing \"anonymous\" access, which allows you to define a \"free\" service which might have limits around it (like only allowing 100 requests/minute), and then an \"elevated\" access where the Consumer would get an improved level of service, such as higher rate limits. There is a global \"anonymous\" consumer that is identified as \"ce26955a-cf08-4907-9427-12d01c8bd94c\" in both our Test and Production environments. To enable anonymous access to your API, update your plugin configuration with:","title":"Two-tiered access setup"},{"location":"gateway/COMMON-CONFIG/#key-auth","text":"1 2 3 4 5 - name: key-auth tags: [ _NS_ ] config: ... anonymous: ce26955a-cf08-4907-9427-12d01c8bd94c","title":"key-auth"},{"location":"gateway/COMMON-CONFIG/#jwt-keycloak","text":"1 2 3 4 5 6 7 8 - name: jwt-keycloak tags: [ _NS_ ] config: ... consumer_match: true consumer_match_ignore_not_found: false consumer_match_claim_custom_id: false anonymous: ce26955a-cf08-4907-9427-12d01c8bd94c","title":"jwt-keycloak"},{"location":"gateway/SSL/","text":"SSL Termination \u00b6 If you would like to verify the SSL endpoint for *.api.gov.bc.ca , you can run the following two commands and compare the fingerprint and serial no. 1 2 3 4 5 export A_HOST=httpbin-regression.api.gov.bc.ca openssl s_client -showcerts -verify 5 -connect 142.34.194.118:443 \\ -servername ${A_HOST} < /dev/null | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; print}' > gw.crt openssl x509 -in gw.crt -fingerprint -serial -dates -noout *.api.gov.bc.ca \u00b6 Issue Date Expires Deployed SHA1 Fingerprint Serial No. Oct 6 2020 Oct 16 2021 Oct 6 2020 20:7D:15:9D:42:BE:CC:BC:FD:EF:DF:13:77:C7:25:A3:A4:72:45:05 7876EB597E14 Feb 16 2021 Oct 16 2021 Feb 25 2021 4D:EA:CE:C4:0A:73:67:D3:B4:03:F6:63:C4:E1:67:2C:47:9D:EA:82 3B5849D8A670 Sep 27 2021 Oct 16 2022 Oct 6 2021 E3:DF:EC:89:BC:03:9B:E9:7D:57:91:EB:52:18:59:46:AA:A9:3A:15 1B588948FBB2 Sep 28 2022 Oct 16 2023 TBD 2D:E5:32:16:C6:0A:0D:F4:0C:1F:39:DD:BD:DD:A8:1A:51:4C:2D:94 34A6625E5ECF4E734BA6C4CF198F99B9 You can run the above as one line: 1 A_HOST=httpbin-regression.api.gov.bc.ca; openssl s_client -showcerts -verify 5 -connect ${A_HOST}:443 -servername ${A_HOST} < /dev/null | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; print}' | openssl x509 -fingerprint -serial -dates -noout Internal Notes \u00b6 Individual File Verification 1 2 openssl x509 -in data-api-wildcard-2020.crt -fingerprint -serial -dates -noout openssl x509 -in data-api-wildcard-2021.crt -fingerprint -serial -dates -noout Cert/Key Verification 1 2 openssl x509 -noout -modulus -in data-api-wildcard.crt | openssl md5 openssl rsa -noout -modulus -in data-api-wildcard.key | openssl md5","title":"SSL Termination"},{"location":"gateway/SSL/#ssl-termination","text":"If you would like to verify the SSL endpoint for *.api.gov.bc.ca , you can run the following two commands and compare the fingerprint and serial no. 1 2 3 4 5 export A_HOST=httpbin-regression.api.gov.bc.ca openssl s_client -showcerts -verify 5 -connect 142.34.194.118:443 \\ -servername ${A_HOST} < /dev/null | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; print}' > gw.crt openssl x509 -in gw.crt -fingerprint -serial -dates -noout","title":"SSL Termination"},{"location":"gateway/SSL/#apigovbcca","text":"Issue Date Expires Deployed SHA1 Fingerprint Serial No. Oct 6 2020 Oct 16 2021 Oct 6 2020 20:7D:15:9D:42:BE:CC:BC:FD:EF:DF:13:77:C7:25:A3:A4:72:45:05 7876EB597E14 Feb 16 2021 Oct 16 2021 Feb 25 2021 4D:EA:CE:C4:0A:73:67:D3:B4:03:F6:63:C4:E1:67:2C:47:9D:EA:82 3B5849D8A670 Sep 27 2021 Oct 16 2022 Oct 6 2021 E3:DF:EC:89:BC:03:9B:E9:7D:57:91:EB:52:18:59:46:AA:A9:3A:15 1B588948FBB2 Sep 28 2022 Oct 16 2023 TBD 2D:E5:32:16:C6:0A:0D:F4:0C:1F:39:DD:BD:DD:A8:1A:51:4C:2D:94 34A6625E5ECF4E734BA6C4CF198F99B9 You can run the above as one line: 1 A_HOST=httpbin-regression.api.gov.bc.ca; openssl s_client -showcerts -verify 5 -connect ${A_HOST}:443 -servername ${A_HOST} < /dev/null | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; print}' | openssl x509 -fingerprint -serial -dates -noout","title":"*.api.gov.bc.ca"},{"location":"gateway/SSL/#internal-notes","text":"Individual File Verification 1 2 openssl x509 -in data-api-wildcard-2020.crt -fingerprint -serial -dates -noout openssl x509 -in data-api-wildcard-2021.crt -fingerprint -serial -dates -noout Cert/Key Verification 1 2 openssl x509 -noout -modulus -in data-api-wildcard.crt | openssl md5 openssl rsa -noout -modulus -in data-api-wildcard.key | openssl md5","title":"Internal Notes"},{"location":"gateway/plugins/acl/","text":"Access Control List \u00b6 Reference: https://docs.konghq.com/hub/kong-inc/acl/ Use Cases \u00b6 Typically this is used when your Environment configuration uses the flow kong-api-key-acl or kong-acl-only where the allow group is a special group defined for the Environment so that Access Managers can grant/revoke access to the Service from the API Services Portal. Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: acl tags: [ _NS_ ] config: allow: - pir-dev deny: null hide_groups_header: true","title":"Access Control List"},{"location":"gateway/plugins/acl/#access-control-list","text":"Reference: https://docs.konghq.com/hub/kong-inc/acl/","title":"Access Control List"},{"location":"gateway/plugins/acl/#use-cases","text":"Typically this is used when your Environment configuration uses the flow kong-api-key-acl or kong-acl-only where the allow group is a special group defined for the Environment so that Access Managers can grant/revoke access to the Service from the API Services Portal.","title":"Use Cases"},{"location":"gateway/plugins/acl/#example","text":"1 2 3 4 5 6 7 8 9 10 11 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: acl tags: [ _NS_ ] config: allow: - pir-dev deny: null hide_groups_header: true","title":"Example"},{"location":"gateway/plugins/cors/","text":"Cross-origin Resource Sharing (CORS) \u00b6 Reference: https://docs.konghq.com/hub/kong-inc/cors/ Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: cors tags: [ _NS_ ] config: origins: [\"*\"] methods: [GET, POST, PUT, PATCH, OPTIONS] headers: [ Connection, Upgrade, Cache-Control, Access-Control-Allow-Headers, Keep-Alive, ] credentials: true max_age: 3600 Additional references: * https://github.com/Kong/kong/issues/4859","title":"Cross-origin Resource Sharing (CORS)"},{"location":"gateway/plugins/cors/#cross-origin-resource-sharing-cors","text":"Reference: https://docs.konghq.com/hub/kong-inc/cors/ Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: cors tags: [ _NS_ ] config: origins: [\"*\"] methods: [GET, POST, PUT, PATCH, OPTIONS] headers: [ Connection, Upgrade, Cache-Control, Access-Control-Allow-Headers, Keep-Alive, ] credentials: true max_age: 3600 Additional references: * https://github.com/Kong/kong/issues/4859","title":"Cross-origin Resource Sharing (CORS)"},{"location":"gateway/plugins/gwa-ip-anonymity/","text":"GWA IP Anonymity \u00b6 Use Cases \u00b6 A user's IP address is considered part of PII (Personally Identifiable Information). This is a custom plugin that was created to mask the last segment of the IP address before it is sent to the Upstream Service. Example \u00b6 1 2 3 4 5 6 7 8 9 10 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: gwa-ip-anonymity tags: [ _NS_ ] enabled: true config: ipv4_mask: 0 ipv6_mask: 0","title":"GWA IP Anonymity"},{"location":"gateway/plugins/gwa-ip-anonymity/#gwa-ip-anonymity","text":"","title":"GWA IP Anonymity"},{"location":"gateway/plugins/gwa-ip-anonymity/#use-cases","text":"A user's IP address is considered part of PII (Personally Identifiable Information). This is a custom plugin that was created to mask the last segment of the IP address before it is sent to the Upstream Service.","title":"Use Cases"},{"location":"gateway/plugins/gwa-ip-anonymity/#example","text":"1 2 3 4 5 6 7 8 9 10 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: gwa-ip-anonymity tags: [ _NS_ ] enabled: true config: ipv4_mask: 0 ipv6_mask: 0","title":"Example"},{"location":"gateway/plugins/jwt-keycloak/","text":"JWT Keycloak \u00b6 Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 services : - name : MY_REST_API tags : [ _NS_ ] plugins : - name : jwt-keycloak tags : [ _NS_ ] enabled : true config : allowed_iss : - https://keycloak/auth/realms/REALM allowed_aud : an-audience-ref #access_token_header: Authorization #realm: kong #disable_access_token_header: false #run_on_preflight: true #iss_key_grace_period: 10 #maximum_expiration: 0 #claims_to_verify: #- exp #algorithm: RS256 #well_known_template: %s/.well-known/openid-configuration #cookie_names: [] #scope: null #realm_roles: null uri_param_names : [] client_roles : null anonymous : null consumer_match : true #consumer_match_claim: azp #consumer_match_ignore_not_found: false #consumer_match_claim_custom_id: false Key Fields \u00b6 Field Type Default Description allowed_iss string[] nil A list of allowed issuers for this route/service/api. Can be specified as a string or as a Pattern . allowed_aud string nil Allowed audience for this route/service/api. Can be specified as a string or as a Pattern . access_token_header string nil An alternate header to use instead of \"Authorization\" realm string nil In the event of a 401, this value gets populated in the \"WWW-Authenticate\" response header as Bearer realm=\"<realm>\" disable_access_token_header boolean false If set to 'true', the access token will not be sent to the upstream service client_roles string[] nil List of Client/Roles in the format <CLIENT_NAME>:<ROLE_NAME> where there has to be at least one match. Multiple Issuers \u00b6 When you have an API that is consumed by your own frontend and potentially by some internal processes, and you would also like to give limited access to the API to external parties, such as other Ministry services, then you can use the API Gateway to protect the API. An example configuration that uses RBAC and verification of User Tokens using the SSO Standard Realm and Service Account Tokens using APS's Shared IdP: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 services : - name : MY_REST_API tags : [ _NS_ ] routes : - name : MY_REST_API_READS hosts : [ myrestapi.api.gov.bc.ca ] methods : [ GET , OPTIONS ] paths : [ / ] plugins : - name : jwt-keycloak tags : [ _NS_ ] enabled : true config : allowed_iss : - https://loginproxy.gov.bc.ca/auth/realms/standard - https://loginproxy.gov.bc.ca/auth/realms/apigw allowed_aud : an-audience-ref client_roles : [ Read ] consumer_match : true - name : MY_REST_API_ADMINS hosts : [ myrestapi.api.gov.bc.ca ] methods : [ GET , OPTIONS , PUT , DELETE , POST , PATCH ] paths : [ / ] plugins : - name : jwt-keycloak tags : [ _NS_ ] enabled : true config : allowed_iss : - https://loginproxy.gov.bc.ca/auth/realms/standard - https://loginproxy.gov.bc.ca/auth/realms/apigw allowed_aud : an-audience-ref client_roles : [ Admin ] consumer_match : true","title":"JWT Keycloak"},{"location":"gateway/plugins/jwt-keycloak/#jwt-keycloak","text":"","title":"JWT Keycloak"},{"location":"gateway/plugins/jwt-keycloak/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 services : - name : MY_REST_API tags : [ _NS_ ] plugins : - name : jwt-keycloak tags : [ _NS_ ] enabled : true config : allowed_iss : - https://keycloak/auth/realms/REALM allowed_aud : an-audience-ref #access_token_header: Authorization #realm: kong #disable_access_token_header: false #run_on_preflight: true #iss_key_grace_period: 10 #maximum_expiration: 0 #claims_to_verify: #- exp #algorithm: RS256 #well_known_template: %s/.well-known/openid-configuration #cookie_names: [] #scope: null #realm_roles: null uri_param_names : [] client_roles : null anonymous : null consumer_match : true #consumer_match_claim: azp #consumer_match_ignore_not_found: false #consumer_match_claim_custom_id: false","title":"Example"},{"location":"gateway/plugins/jwt-keycloak/#key-fields","text":"Field Type Default Description allowed_iss string[] nil A list of allowed issuers for this route/service/api. Can be specified as a string or as a Pattern . allowed_aud string nil Allowed audience for this route/service/api. Can be specified as a string or as a Pattern . access_token_header string nil An alternate header to use instead of \"Authorization\" realm string nil In the event of a 401, this value gets populated in the \"WWW-Authenticate\" response header as Bearer realm=\"<realm>\" disable_access_token_header boolean false If set to 'true', the access token will not be sent to the upstream service client_roles string[] nil List of Client/Roles in the format <CLIENT_NAME>:<ROLE_NAME> where there has to be at least one match.","title":"Key Fields"},{"location":"gateway/plugins/jwt-keycloak/#multiple-issuers","text":"When you have an API that is consumed by your own frontend and potentially by some internal processes, and you would also like to give limited access to the API to external parties, such as other Ministry services, then you can use the API Gateway to protect the API. An example configuration that uses RBAC and verification of User Tokens using the SSO Standard Realm and Service Account Tokens using APS's Shared IdP: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 services : - name : MY_REST_API tags : [ _NS_ ] routes : - name : MY_REST_API_READS hosts : [ myrestapi.api.gov.bc.ca ] methods : [ GET , OPTIONS ] paths : [ / ] plugins : - name : jwt-keycloak tags : [ _NS_ ] enabled : true config : allowed_iss : - https://loginproxy.gov.bc.ca/auth/realms/standard - https://loginproxy.gov.bc.ca/auth/realms/apigw allowed_aud : an-audience-ref client_roles : [ Read ] consumer_match : true - name : MY_REST_API_ADMINS hosts : [ myrestapi.api.gov.bc.ca ] methods : [ GET , OPTIONS , PUT , DELETE , POST , PATCH ] paths : [ / ] plugins : - name : jwt-keycloak tags : [ _NS_ ] enabled : true config : allowed_iss : - https://loginproxy.gov.bc.ca/auth/realms/standard - https://loginproxy.gov.bc.ca/auth/realms/apigw allowed_aud : an-audience-ref client_roles : [ Admin ] consumer_match : true","title":"Multiple Issuers"},{"location":"gateway/plugins/key-auth/","text":"Key Auth \u00b6 Reference: https://docs.konghq.com/hub/kong-inc/key-auth/ Example \u00b6 1 2 3 4 5 6 7 8 9 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: key-auth tags: [ _NS_ ] config: key_names: - X-API-KEY","title":"Key Auth"},{"location":"gateway/plugins/key-auth/#key-auth","text":"Reference: https://docs.konghq.com/hub/kong-inc/key-auth/","title":"Key Auth"},{"location":"gateway/plugins/key-auth/#example","text":"1 2 3 4 5 6 7 8 9 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: key-auth tags: [ _NS_ ] config: key_names: - X-API-KEY","title":"Example"},{"location":"gateway/plugins/kong-upstream-auth-basic/","text":"Kong Upstream Auth Basic \u00b6 Reference: https://docs.konghq.com/hub/revolution_systems/upstream-auth-basic/ Example \u00b6 1 2 3 4 5 6 7 8 9 10 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - enabled: true name: upstream-auth-basic tags: [ _NS_ ] config: username: user password: password","title":"Kong Upstream Auth Basic"},{"location":"gateway/plugins/kong-upstream-auth-basic/#kong-upstream-auth-basic","text":"Reference: https://docs.konghq.com/hub/revolution_systems/upstream-auth-basic/","title":"Kong Upstream Auth Basic"},{"location":"gateway/plugins/kong-upstream-auth-basic/#example","text":"1 2 3 4 5 6 7 8 9 10 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - enabled: true name: upstream-auth-basic tags: [ _NS_ ] config: username: user password: password","title":"Example"},{"location":"gateway/plugins/kong-upstream-jwt/","text":"Kong Upstream JWT \u00b6 Reference: https://docs.konghq.com/hub/optum/kong-upstream-jwt Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - enabled: true name: kong-upstream-jwt tags: [ _NS_ ] config: header: GW-JWT include_credential_type: false issuer: null key_id: null private_key_location: /etc/secrets/kongh-cluster-ca/kong-upstream-jwt.key public_key_location: /etc/secrets/kongh-cluster-ca/kong-upstream-jwt.pem","title":"Kong Upstream JWT"},{"location":"gateway/plugins/kong-upstream-jwt/#kong-upstream-jwt","text":"Reference: https://docs.konghq.com/hub/optum/kong-upstream-jwt","title":"Kong Upstream JWT"},{"location":"gateway/plugins/kong-upstream-jwt/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - enabled: true name: kong-upstream-jwt tags: [ _NS_ ] config: header: GW-JWT include_credential_type: false issuer: null key_id: null private_key_location: /etc/secrets/kongh-cluster-ca/kong-upstream-jwt.key public_key_location: /etc/secrets/kongh-cluster-ca/kong-upstream-jwt.pem","title":"Example"},{"location":"gateway/plugins/oidc-consumer/","text":"OIDC Consumer \u00b6 Description: This plugin is used in conjunction with the oidc plugin to map the JWT Token to a Kong Consumer. Example \u00b6 1 2 3 4 5 6 7 8 9 10 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: oidc-consumer enabled: true tags: [ _NS_ ] config: username_field: preferred_username create_consumer: false","title":"OIDC Consumer"},{"location":"gateway/plugins/oidc-consumer/#oidc-consumer","text":"Description: This plugin is used in conjunction with the oidc plugin to map the JWT Token to a Kong Consumer.","title":"OIDC Consumer"},{"location":"gateway/plugins/oidc-consumer/#example","text":"1 2 3 4 5 6 7 8 9 10 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: oidc-consumer enabled: true tags: [ _NS_ ] config: username_field: preferred_username create_consumer: false","title":"Example"},{"location":"gateway/plugins/oidc/","text":"OIDC \u00b6 Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - enabled: true name: oidc tags: [ _NS_ ] config: access_token_as_bearer: \"no\" access_token_header_name: X-Access-Token bearer_jwt_auth_allowed_auds: - aud1 bearer_jwt_auth_enable: \"no\" bearer_jwt_auth_signing_algs: - RS256 bearer_only: \"no\" client_id: <CLIENT_ID> client_secret: <CLIENT_SECRET> disable_access_token_header: \"no\" disable_id_token_header: \"no\" disable_userinfo_header: \"no\" discovery: https://keycloak/auth/realms/REALM/.well-known/openid-configuration filters: null groups_claim: groups header_claims: [] header_names: [] id_token_header_name: X-ID-Token ignore_auth_filters: \"\" introspection_cache_ignore: \"no\" introspection_endpoint: https://keycloak/auth/realms/REALM/protocol/openid-connect/token/introspect introspection_endpoint_auth_method: null logout_path: /logout realm: kong recovery_page_path: null redirect_after_logout_uri: /headers redirect_uri: null response_type: code revoke_tokens_on_logout: \"no\" scope: openid session_secret: null skip_already_auth_requests: \"no\" ssl_verify: \"no\" timeout: null token_endpoint_auth_method: client_secret_post unauth_action: auth use_jwks: \"yes\" userinfo_header_name: X-USERINFO validate_scope: \"no\"","title":"OIDC"},{"location":"gateway/plugins/oidc/#oidc","text":"","title":"OIDC"},{"location":"gateway/plugins/oidc/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - enabled: true name: oidc tags: [ _NS_ ] config: access_token_as_bearer: \"no\" access_token_header_name: X-Access-Token bearer_jwt_auth_allowed_auds: - aud1 bearer_jwt_auth_enable: \"no\" bearer_jwt_auth_signing_algs: - RS256 bearer_only: \"no\" client_id: <CLIENT_ID> client_secret: <CLIENT_SECRET> disable_access_token_header: \"no\" disable_id_token_header: \"no\" disable_userinfo_header: \"no\" discovery: https://keycloak/auth/realms/REALM/.well-known/openid-configuration filters: null groups_claim: groups header_claims: [] header_names: [] id_token_header_name: X-ID-Token ignore_auth_filters: \"\" introspection_cache_ignore: \"no\" introspection_endpoint: https://keycloak/auth/realms/REALM/protocol/openid-connect/token/introspect introspection_endpoint_auth_method: null logout_path: /logout realm: kong recovery_page_path: null redirect_after_logout_uri: /headers redirect_uri: null response_type: code revoke_tokens_on_logout: \"no\" scope: openid session_secret: null skip_already_auth_requests: \"no\" ssl_verify: \"no\" timeout: null token_endpoint_auth_method: client_secret_post unauth_action: auth use_jwks: \"yes\" userinfo_header_name: X-USERINFO validate_scope: \"no\"","title":"Example"},{"location":"gateway/plugins/proxy-cache/","text":"Proxy Cache \u00b6 Reference: https://docs.konghq.com/hub/kong-inc/proxy-cache/ Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 services : - name : MY_REST_API tags : [ _NS_ ] plugins : - name : proxy-cache tags : [ _NS_ ] config : response_code : - 200 request_method : - GET - HEAD content_type : - text/html - text/css - application/javascript cache_ttl : 30 # vary_headers: # - header_1 # vary_query_params: # - param_1 # strategy: memory # memory: # dictionary_name: proxy_content_cache cache_ttl : We only allow this value to be between 15 and 60 seconds The strategy and memory.dictionary_name will be set automatically and can not be overridden. vary_headers : Relevant request headers considered for the cache key. If undefined, none of the headers are taken into consideration. vary_query_params : Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration. The dictionary_name is capped at 1Mi to be shared across all services. Recommended practice is to use the cache for targeted files to produce the greatest improvement on overall performance of your application.","title":"Proxy Cache"},{"location":"gateway/plugins/proxy-cache/#proxy-cache","text":"Reference: https://docs.konghq.com/hub/kong-inc/proxy-cache/","title":"Proxy Cache"},{"location":"gateway/plugins/proxy-cache/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 services : - name : MY_REST_API tags : [ _NS_ ] plugins : - name : proxy-cache tags : [ _NS_ ] config : response_code : - 200 request_method : - GET - HEAD content_type : - text/html - text/css - application/javascript cache_ttl : 30 # vary_headers: # - header_1 # vary_query_params: # - param_1 # strategy: memory # memory: # dictionary_name: proxy_content_cache cache_ttl : We only allow this value to be between 15 and 60 seconds The strategy and memory.dictionary_name will be set automatically and can not be overridden. vary_headers : Relevant request headers considered for the cache key. If undefined, none of the headers are taken into consideration. vary_query_params : Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration. The dictionary_name is capped at 1Mi to be shared across all services. Recommended practice is to use the cache for targeted files to produce the greatest improvement on overall performance of your application.","title":"Example"},{"location":"gateway/plugins/rate-limiting/","text":"Rate Limiting \u00b6 Reference: https://docs.konghq.com/hub/kong-inc/rate-limiting/ policy : local | redis limit_by : consumer | credential | ip | service | header | path fault_tolerant : Applies when Kong is connecting to Redis - if Redis is down, do you want to block traffic, or allow it through without limiting Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: rate-limiting tags: [ _NS_ ] config: fault_tolerant: true hide_client_headers: false limit_by: ip minute: 30000 second: null hour: null day: null month: null year: null Alternatives \u00b6 If you want to apply 2 global rate limits, you can use the plugin: rate-limiting_902 . For example, one control with limit_by = service that provides an umbrella max requests per minute and another control with limit_by = credential that ensures each authenticated user plays nice.","title":"Rate Limiting"},{"location":"gateway/plugins/rate-limiting/#rate-limiting","text":"Reference: https://docs.konghq.com/hub/kong-inc/rate-limiting/ policy : local | redis limit_by : consumer | credential | ip | service | header | path fault_tolerant : Applies when Kong is connecting to Redis - if Redis is down, do you want to block traffic, or allow it through without limiting","title":"Rate Limiting"},{"location":"gateway/plugins/rate-limiting/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - name: rate-limiting tags: [ _NS_ ] config: fault_tolerant: true hide_client_headers: false limit_by: ip minute: 30000 second: null hour: null day: null month: null year: null","title":"Example"},{"location":"gateway/plugins/rate-limiting/#alternatives","text":"If you want to apply 2 global rate limits, you can use the plugin: rate-limiting_902 . For example, one control with limit_by = service that provides an umbrella max requests per minute and another control with limit_by = credential that ensures each authenticated user plays nice.","title":"Alternatives"},{"location":"gateway/plugins/request-transformer/","text":"Request Transformer \u00b6 Reference: https://docs.konghq.com/hub/kong-inc/request-transformer/ Example: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - config: add: body: {} headers: {} querystring: {} append: body: {} headers: {} querystring: {} remove: body: {} headers: - Cookie querystring: {} rename: body: {} headers: {} querystring: {} replace: body: {} headers: {} querystring: {} enabled: true name: request-transformer protocols: - https - http tags: [ _NS_ ]","title":"Request Transformer"},{"location":"gateway/plugins/request-transformer/#request-transformer","text":"Reference: https://docs.konghq.com/hub/kong-inc/request-transformer/","title":"Request Transformer"},{"location":"gateway/plugins/request-transformer/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 services: - name: MY_REST_API tags: [ _NS_ ] plugins: - config: add: body: {} headers: {} querystring: {} append: body: {} headers: {} querystring: {} remove: body: {} headers: - Cookie querystring: {} rename: body: {} headers: {} querystring: {} replace: body: {} headers: {} querystring: {} enabled: true name: request-transformer protocols: - https - http tags: [ _NS_ ]","title":"Example:"},{"location":"gateway/plugins/waiting-queue/","text":"Waiting Queue \u00b6 This uses the cloned plugin: jwt-keycloak_1010 . It is to support Waiting Queue solutions, such as https://github.com/bcgov/WaitingQueue Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 services : - name : MY_REST_API tags : [ _NS_ ] plugins : - name : jwt-keycloak_1010 tags : [ _NS_ ] enabled : true config : allowed_iss : - https://auth.service.issuer allowed_aud : an-audience-ref access_token_header : AUTH-WAITING-QUEUE realm : waitingqueue disable_access_token_header : true #algorithm: RS256 #run_on_preflight: true #iss_key_grace_period: 10 #maximum_expiration: 0 #claims_to_verify: #- exp #well_known_template: %s/.well-known/openid-configuration #cookie_names: [] #uri_param_names: [] #scope: null #roles: null #client_roles: null #anonymous: null #realm_roles: null #consumer_match: false Key Fields \u00b6 Field Type Default Description allowed_iss string[] nil A list of allowed issuers for this route/service/api. Can be specified as a string or as a Pattern . allowed_aud string nil Allowed audience for this route/service/api. Can be specified as a string or as a Pattern . access_token_header string nil An alternate header to use instead of \"Authorization\" realm string nil In the event of a 401, this value gets populated in the \"WWW-Authenticate\" response header as Bearer realm=\"<realm>\" disable_access_token_header boolean false If set to 'true', the access token will not be sent to the upstream service Waiting Queue + User Credentials \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 plugins : - name : jwt-keycloak_1010 tags : [ ns.NS ] enabled : true config : allowed_iss : - https://waitingqueue.issuer/auth allowed_aud : ap-reg-auth-profile-test access_token_header : AUTH-WAITING-QUEUE realm : waitingqueue - name : jwt-keycloak tags : [ ns.NS ] enabled : true config : allowed_iss : - https://test.loginproxy.gov.bc.ca/auth/realms/apigw realm : apigw consumer_match : true consumer_match_claim : azp consumer_match_claim_custom_id : true consumer_match_ignore_not_found : false If the Waiting Queue token is invalid, then the response will be: 1 2 HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"waitingqueue\" If the User's token is invalid, then the response will be: 1 2 HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"apigw\" The Waiting Queue plugin ( jwt-keycloak_1010 ) will be evaluated first.","title":"Waiting Queue"},{"location":"gateway/plugins/waiting-queue/#waiting-queue","text":"This uses the cloned plugin: jwt-keycloak_1010 . It is to support Waiting Queue solutions, such as https://github.com/bcgov/WaitingQueue","title":"Waiting Queue"},{"location":"gateway/plugins/waiting-queue/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 services : - name : MY_REST_API tags : [ _NS_ ] plugins : - name : jwt-keycloak_1010 tags : [ _NS_ ] enabled : true config : allowed_iss : - https://auth.service.issuer allowed_aud : an-audience-ref access_token_header : AUTH-WAITING-QUEUE realm : waitingqueue disable_access_token_header : true #algorithm: RS256 #run_on_preflight: true #iss_key_grace_period: 10 #maximum_expiration: 0 #claims_to_verify: #- exp #well_known_template: %s/.well-known/openid-configuration #cookie_names: [] #uri_param_names: [] #scope: null #roles: null #client_roles: null #anonymous: null #realm_roles: null #consumer_match: false","title":"Example"},{"location":"gateway/plugins/waiting-queue/#key-fields","text":"Field Type Default Description allowed_iss string[] nil A list of allowed issuers for this route/service/api. Can be specified as a string or as a Pattern . allowed_aud string nil Allowed audience for this route/service/api. Can be specified as a string or as a Pattern . access_token_header string nil An alternate header to use instead of \"Authorization\" realm string nil In the event of a 401, this value gets populated in the \"WWW-Authenticate\" response header as Bearer realm=\"<realm>\" disable_access_token_header boolean false If set to 'true', the access token will not be sent to the upstream service","title":"Key Fields"},{"location":"gateway/plugins/waiting-queue/#waiting-queue-user-credentials","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 plugins : - name : jwt-keycloak_1010 tags : [ ns.NS ] enabled : true config : allowed_iss : - https://waitingqueue.issuer/auth allowed_aud : ap-reg-auth-profile-test access_token_header : AUTH-WAITING-QUEUE realm : waitingqueue - name : jwt-keycloak tags : [ ns.NS ] enabled : true config : allowed_iss : - https://test.loginproxy.gov.bc.ca/auth/realms/apigw realm : apigw consumer_match : true consumer_match_claim : azp consumer_match_claim_custom_id : true consumer_match_ignore_not_found : false If the Waiting Queue token is invalid, then the response will be: 1 2 HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"waitingqueue\" If the User's token is invalid, then the response will be: 1 2 HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"apigw\" The Waiting Queue plugin ( jwt-keycloak_1010 ) will be evaluated first.","title":"Waiting Queue + User Credentials"},{"location":"guides/intro-signed-jwt-pubkey/","text":"Signed JWT with Certificate \u00b6 The following example uses NodeJS code to show how to prepare for signed JWT authentication to an API on the BC Government API Gateway. 1. Generate a Certificate Key Pair \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 npm install --save node-jose ms echo \" const fs = require('fs'); const jose = require('node-jose'); const keyStore = jose.JWK.createKeyStore() keyStore.generate('RSA', 2048, {alg: 'RS256', use: 'sig' }) .then(result => { const [key] = keyStore.all({ use: 'sig' }) fs.writeFileSync( 'client.key', key.toPEM(true) ) fs.writeFileSync( 'client.crt', key.toPEM(false) ) console.log('Saved to: client.key and client.crt') }) \" | node 2. Request Access to an API \u00b6 Go to the API Services Portal and request access to an API that is configured with the Signed JWT protection. After selecting the environment, you will be prompted to provide a \"Public Key\", which will be the contents of the client.crt created in step 1. After requesting access, you will be provided with some secrets. Make a note of the Client ID , Issuer and Token Endpoint . 1 2 3 export CID=\"\" export ISS=\"\" export TURL=\"\" 3. Request a Client JWT Token \u00b6 Requesting a Client JWT Token is a two-step process: a) Build a Client Assertion Token that is signed with the private key you generated earlier. b) Request a token from the Token Endpoint using the Client Assertion. The following sample performs both steps: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 npm install --save njwt node-fetch@v2 echo \" const njwt = require('njwt'); const fs = require('fs') const privateKey = fs.readFileSync('client.key') const clientId = process.env.CID; // Or load from configuration const now = Math.floor( new Date().getTime() / 1000 ); // seconds since epoch const plus5Minutes = new Date( ( now + (5*60) ) * 1000); // Date object const alg = 'RS256'; // one of RSA or ECDSA algorithms: RS256, RS384, RS512, ES256, ES384, ES512 const claims = { aud: process.env.ISS }; const jwt = njwt.create(claims, privateKey, alg) .setIssuedAt(now) .setExpiration(plus5Minutes) .setIssuer(clientId) .setSubject(clientId) .compact(); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const params = new URLSearchParams(); params.append('grant_type', 'client_credentials'); params.append('client_id', process.env.CID); params.append('scopes', 'openid'); params.append('client_assertion_type', 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'); params.append('client_assertion', jwt); fetch(process.env.TURL, { method: 'POST', body: params }) .then(res => res.json()) .then(json => console.log(json)); \" | node 4. Call the API \u00b6 Call the API using the newly generated Token returned from the Identity Provider. 1 2 curl -v https://a-protected-api.test.api.gov.bc.ca/headers \\ -H \"Authorization: Bearer $TOK\"","title":"Signed JWT with Certificate"},{"location":"guides/intro-signed-jwt-pubkey/#signed-jwt-with-certificate","text":"The following example uses NodeJS code to show how to prepare for signed JWT authentication to an API on the BC Government API Gateway.","title":"Signed JWT with Certificate"},{"location":"guides/intro-signed-jwt-pubkey/#1-generate-a-certificate-key-pair","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 npm install --save node-jose ms echo \" const fs = require('fs'); const jose = require('node-jose'); const keyStore = jose.JWK.createKeyStore() keyStore.generate('RSA', 2048, {alg: 'RS256', use: 'sig' }) .then(result => { const [key] = keyStore.all({ use: 'sig' }) fs.writeFileSync( 'client.key', key.toPEM(true) ) fs.writeFileSync( 'client.crt', key.toPEM(false) ) console.log('Saved to: client.key and client.crt') }) \" | node","title":"1. Generate a Certificate Key Pair"},{"location":"guides/intro-signed-jwt-pubkey/#2-request-access-to-an-api","text":"Go to the API Services Portal and request access to an API that is configured with the Signed JWT protection. After selecting the environment, you will be prompted to provide a \"Public Key\", which will be the contents of the client.crt created in step 1. After requesting access, you will be provided with some secrets. Make a note of the Client ID , Issuer and Token Endpoint . 1 2 3 export CID=\"\" export ISS=\"\" export TURL=\"\"","title":"2. Request Access to an API"},{"location":"guides/intro-signed-jwt-pubkey/#3-request-a-client-jwt-token","text":"Requesting a Client JWT Token is a two-step process: a) Build a Client Assertion Token that is signed with the private key you generated earlier. b) Request a token from the Token Endpoint using the Client Assertion. The following sample performs both steps: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 npm install --save njwt node-fetch@v2 echo \" const njwt = require('njwt'); const fs = require('fs') const privateKey = fs.readFileSync('client.key') const clientId = process.env.CID; // Or load from configuration const now = Math.floor( new Date().getTime() / 1000 ); // seconds since epoch const plus5Minutes = new Date( ( now + (5*60) ) * 1000); // Date object const alg = 'RS256'; // one of RSA or ECDSA algorithms: RS256, RS384, RS512, ES256, ES384, ES512 const claims = { aud: process.env.ISS }; const jwt = njwt.create(claims, privateKey, alg) .setIssuedAt(now) .setExpiration(plus5Minutes) .setIssuer(clientId) .setSubject(clientId) .compact(); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const params = new URLSearchParams(); params.append('grant_type', 'client_credentials'); params.append('client_id', process.env.CID); params.append('scopes', 'openid'); params.append('client_assertion_type', 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'); params.append('client_assertion', jwt); fetch(process.env.TURL, { method: 'POST', body: params }) .then(res => res.json()) .then(json => console.log(json)); \" | node","title":"3. Request a Client JWT Token"},{"location":"guides/intro-signed-jwt-pubkey/#4-call-the-api","text":"Call the API using the newly generated Token returned from the Identity Provider. 1 2 curl -v https://a-protected-api.test.api.gov.bc.ca/headers \\ -H \"Authorization: Bearer $TOK\"","title":"4. Call the API"},{"location":"guides/intro-signed-jwt/","text":"Signed JWT with Hosted JWKS \u00b6 The following example uses NodeJS code to show how to prepare for signed JWT authentication to an API on the BC Government API Gateway. 1. Generate a Certificate Key Pair \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 npm install --save node-jose ms echo \" const fs = require('fs'); const jose = require('node-jose'); const keyStore = jose.JWK.createKeyStore() keyStore.generate('RSA', 2048, {alg: 'RS256', use: 'sig' }) .then(result => { fs.writeFileSync( 'keys.json', JSON.stringify(keyStore.toJSON(true), null, ' ') ) const [key] = keyStore.all({ use: 'sig' }) console.log(key.toPEM(true)) console.log(key.toPEM(false)) }) \" | node 2. Publish the Public Key \u00b6 Publish the Public Key in JWKS Format at a location that is publically accessible. 1 2 3 4 5 6 7 8 echo \" const fs = require('fs') const jose = require('node-jose'); const ks = fs.readFileSync('keys.json') jose.JWK.asKeyStore(ks.toString()).then(keyStore => console.log(JSON.stringify(keyStore.toJSON(), null, 3))); \" | node Place the JWKS JSON file somewhere that it can be reached publically. For testing, an easy option is to use Github Pages and publish the JWKS JSON file in order to make a public URL. For example: 1 https://ikethecoder.github.io/temp-place/certs.json 3. Request Access to an API \u00b6 Go to the API Services Portal and request access to an API that is configured with the Signed JWT protection. After selecting the environment, you will be prompted to provide a \"JWKS URL\", which will be the URL of the JWKS file that you published in step 2. After requesting access, you will be provided with some secrets. Make a note of the Client ID , Issuer and Token Endpoint . 1 2 3 export CID=\"\" export ISS=\"\" export TURL=\"\" 4. Request a Client JWT Token \u00b6 Requesting a Client JWT Token is a two-step process: a) Build a Client Assertion Token that is signed with the private key you generated earlier. b) Request a token from the Token Endpoint using the Client Assertion. The following sample performs both steps: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 npm install --save njwt node-fetch echo \" const njwt = require('njwt'); const fs = require('fs') const jose = require('node-jose'); const ks = fs.readFileSync('keys.json') jose.JWK.asKeyStore(ks.toString()).then(keyStore => { const [key] = keyStore.all({ use: 'sig' }) const privateKey = key.toPEM(true) // Load an RSA private key from configuration const clientId = process.env.CID; // Or load from configuration const now = Math.floor( new Date().getTime() / 1000 ); // seconds since epoch const plus5Minutes = new Date( ( now + (5*60) ) * 1000); // Date object const alg = 'RS256'; // one of RSA or ECDSA algorithms: RS256, RS384, RS512, ES256, ES384, ES512 const claims = { aud: process.env.ISS }; const jwt = njwt.create(claims, privateKey, alg) .setIssuedAt(now) .setExpiration(plus5Minutes) .setIssuer(clientId) .setSubject(clientId) .compact(); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const params = new URLSearchParams(); params.append('grant_type', 'client_credentials'); params.append('client_id', process.env.CID); params.append('scopes', 'openid'); params.append('client_assertion_type', 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'); params.append('client_assertion', jwt); fetch(process.env.TURL, { method: 'POST', body: params }) .then(res => res.json()) .then(json => console.log(json)); }); \" | node 5. Call the API \u00b6 Call the API using the newly generated Token returned from the Identity Provider. 1 2 curl -v https://a-protected-api.test.api.gov.bc.ca/headers \\ -H \"Authorization: Bearer $TOK\"","title":"Signed JWT with Hosted JWKS"},{"location":"guides/intro-signed-jwt/#signed-jwt-with-hosted-jwks","text":"The following example uses NodeJS code to show how to prepare for signed JWT authentication to an API on the BC Government API Gateway.","title":"Signed JWT with Hosted JWKS"},{"location":"guides/intro-signed-jwt/#1-generate-a-certificate-key-pair","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 npm install --save node-jose ms echo \" const fs = require('fs'); const jose = require('node-jose'); const keyStore = jose.JWK.createKeyStore() keyStore.generate('RSA', 2048, {alg: 'RS256', use: 'sig' }) .then(result => { fs.writeFileSync( 'keys.json', JSON.stringify(keyStore.toJSON(true), null, ' ') ) const [key] = keyStore.all({ use: 'sig' }) console.log(key.toPEM(true)) console.log(key.toPEM(false)) }) \" | node","title":"1. Generate a Certificate Key Pair"},{"location":"guides/intro-signed-jwt/#2-publish-the-public-key","text":"Publish the Public Key in JWKS Format at a location that is publically accessible. 1 2 3 4 5 6 7 8 echo \" const fs = require('fs') const jose = require('node-jose'); const ks = fs.readFileSync('keys.json') jose.JWK.asKeyStore(ks.toString()).then(keyStore => console.log(JSON.stringify(keyStore.toJSON(), null, 3))); \" | node Place the JWKS JSON file somewhere that it can be reached publically. For testing, an easy option is to use Github Pages and publish the JWKS JSON file in order to make a public URL. For example: 1 https://ikethecoder.github.io/temp-place/certs.json","title":"2. Publish the Public Key"},{"location":"guides/intro-signed-jwt/#3-request-access-to-an-api","text":"Go to the API Services Portal and request access to an API that is configured with the Signed JWT protection. After selecting the environment, you will be prompted to provide a \"JWKS URL\", which will be the URL of the JWKS file that you published in step 2. After requesting access, you will be provided with some secrets. Make a note of the Client ID , Issuer and Token Endpoint . 1 2 3 export CID=\"\" export ISS=\"\" export TURL=\"\"","title":"3. Request Access to an API"},{"location":"guides/intro-signed-jwt/#4-request-a-client-jwt-token","text":"Requesting a Client JWT Token is a two-step process: a) Build a Client Assertion Token that is signed with the private key you generated earlier. b) Request a token from the Token Endpoint using the Client Assertion. The following sample performs both steps: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 npm install --save njwt node-fetch echo \" const njwt = require('njwt'); const fs = require('fs') const jose = require('node-jose'); const ks = fs.readFileSync('keys.json') jose.JWK.asKeyStore(ks.toString()).then(keyStore => { const [key] = keyStore.all({ use: 'sig' }) const privateKey = key.toPEM(true) // Load an RSA private key from configuration const clientId = process.env.CID; // Or load from configuration const now = Math.floor( new Date().getTime() / 1000 ); // seconds since epoch const plus5Minutes = new Date( ( now + (5*60) ) * 1000); // Date object const alg = 'RS256'; // one of RSA or ECDSA algorithms: RS256, RS384, RS512, ES256, ES384, ES512 const claims = { aud: process.env.ISS }; const jwt = njwt.create(claims, privateKey, alg) .setIssuedAt(now) .setExpiration(plus5Minutes) .setIssuer(clientId) .setSubject(clientId) .compact(); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const params = new URLSearchParams(); params.append('grant_type', 'client_credentials'); params.append('client_id', process.env.CID); params.append('scopes', 'openid'); params.append('client_assertion_type', 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'); params.append('client_assertion', jwt); fetch(process.env.TURL, { method: 'POST', body: params }) .then(res => res.json()) .then(json => console.log(json)); }); \" | node","title":"4. Request a Client JWT Token"},{"location":"guides/intro-signed-jwt/#5-call-the-api","text":"Call the API using the newly generated Token returned from the Identity Provider. 1 2 curl -v https://a-protected-api.test.api.gov.bc.ca/headers \\ -H \"Authorization: Bearer $TOK\"","title":"5. Call the API"},{"location":"guides/keycloak-rbac/","text":"OIDC and RBAC Protection \u00b6 This guide walks through the steps to protect your Application using Keycloak SSO and the APS Kong Gateway. 1. Configure a confidential client \u00b6 Go to the Common Hosted SSO (CSS) site ( https://bcgov.github.io/sso-requests ) and request a new confidential client. After the client has been provisioned, you can go to the Role Management tab to configure the Roles you want to use to protect resources in your Application. The Assign Users to Roles can be used to administer User permissions. 2. Configure the APS Kong Gateway \u00b6 Pre-requisites: You have your application deployed in the Openshift Silver cluster You have created a namespace in the API Services Portal You have a Service Account created with the GatewayConfig.Publish permission Your Network Policy has been configured to allow traffic from the APS project space You have completed your minimal service/route configuration and published it to the APS Kong Gateway To protect your application, there are two plugins that need to be configured: oidc and acl . oidc Update discovery if you are using SSO other than dev or if using a non-standard realm The groups_claim must be client_roles as that is what the SSO service uses for the roles that the user has assigned to it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 plugins: - enabled: true name: oidc tags: [ ns.$NS ] config: access_token_as_bearer: \"no\" access_token_header_name: Authorization bearer_jwt_auth_allowed_auds: - YOUR_CLIENT_ID bearer_jwt_auth_enable: \"no\" bearer_jwt_auth_signing_algs: - RS256 bearer_only: \"no\" client_id: YOUR_CLIENT_ID client_secret: YOUR_CLIENT_SECRET disable_access_token_header: \"yes\" disable_id_token_header: \"yes\" disable_userinfo_header: \"yes\" discovery: https://dev.loginproxy.gov.bc.ca/auth/realms/standard/.well-known/openid-configuration filters: null groups_claim: client_roles header_claims: [] header_names: [] id_token_header_name: X-ID-Token ignore_auth_filters: \"\" introspection_cache_ignore: \"no\" introspection_endpoint: null introspection_endpoint_auth_method: null logout_path: /logout realm: kong recovery_page_path: null redirect_after_logout_uri: / redirect_uri: null response_type: code revoke_tokens_on_logout: \"yes\" scope: openid session_secret: null skip_already_auth_requests: \"no\" ssl_verify: \"no\" timeout: null token_endpoint_auth_method: client_secret_post unauth_action: auth use_jwks: \"yes\" userinfo_header_name: X-USERINFO validate_scope: \"yes\" If your upstream service needs specific attributes, the header_claims and header_names config can be used to pass claims as request headers to the upstream service. A subset of the claims available: 1 2 3 4 5 6 7 8 9 10 \"idir_user_guid\": \"220469E030000000000000000A607C5\", \"identity_provider\": \"idir\", \"idir_username\": \"FLAST\", \"email_verified\": false, \"name\": \"First Last\", \"preferred_username\": \"220469e030000000000000a607c5@idir\", \"display_name\": \"XT:Last, First CITZ:IN\", \"given_name\": \"Last\", \"family_name\": \"First\", \"email\": \"last.first@email\" An example to get idir_username and email passed, would be: 1 2 header_claims: [ idir_username, email ] header_names: [ X-Idir-Username, X-User-Email ] acl The acl plugin will enforce that the user's client_roles includes the roles defined in the allow list. 1 2 3 4 5 6 7 8 9 plugins: - enabled: true name: acl tags: [ ns.$NS ] config: allow: - ROLE_FOR_ACCESS deny: null hide_groups_header: false If hide_groups_headers is false then X-Authenticated-Groups will be a request header with a comma-delimited list of roles that the user belongs to. request-transformer (optional) If your upstream service is stateless, then you can remove the cookie before the request is forwarded to it. 1 2 3 4 5 6 7 - name: request-transformer protocols: [http] tags: [ ns.$NS ] config: remove: headers: - Cookie Outcome \u00b6 Vanity url: my-application.apps.gov.bc.ca Protected by SSL *.apps.gov.bc.ca certificate Separation of concerns for authentication and authorization","title":"OIDC and RBAC Protection"},{"location":"guides/keycloak-rbac/#oidc-and-rbac-protection","text":"This guide walks through the steps to protect your Application using Keycloak SSO and the APS Kong Gateway.","title":"OIDC and RBAC Protection"},{"location":"guides/keycloak-rbac/#1-configure-a-confidential-client","text":"Go to the Common Hosted SSO (CSS) site ( https://bcgov.github.io/sso-requests ) and request a new confidential client. After the client has been provisioned, you can go to the Role Management tab to configure the Roles you want to use to protect resources in your Application. The Assign Users to Roles can be used to administer User permissions.","title":"1. Configure a confidential client"},{"location":"guides/keycloak-rbac/#2-configure-the-aps-kong-gateway","text":"Pre-requisites: You have your application deployed in the Openshift Silver cluster You have created a namespace in the API Services Portal You have a Service Account created with the GatewayConfig.Publish permission Your Network Policy has been configured to allow traffic from the APS project space You have completed your minimal service/route configuration and published it to the APS Kong Gateway To protect your application, there are two plugins that need to be configured: oidc and acl . oidc Update discovery if you are using SSO other than dev or if using a non-standard realm The groups_claim must be client_roles as that is what the SSO service uses for the roles that the user has assigned to it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 plugins: - enabled: true name: oidc tags: [ ns.$NS ] config: access_token_as_bearer: \"no\" access_token_header_name: Authorization bearer_jwt_auth_allowed_auds: - YOUR_CLIENT_ID bearer_jwt_auth_enable: \"no\" bearer_jwt_auth_signing_algs: - RS256 bearer_only: \"no\" client_id: YOUR_CLIENT_ID client_secret: YOUR_CLIENT_SECRET disable_access_token_header: \"yes\" disable_id_token_header: \"yes\" disable_userinfo_header: \"yes\" discovery: https://dev.loginproxy.gov.bc.ca/auth/realms/standard/.well-known/openid-configuration filters: null groups_claim: client_roles header_claims: [] header_names: [] id_token_header_name: X-ID-Token ignore_auth_filters: \"\" introspection_cache_ignore: \"no\" introspection_endpoint: null introspection_endpoint_auth_method: null logout_path: /logout realm: kong recovery_page_path: null redirect_after_logout_uri: / redirect_uri: null response_type: code revoke_tokens_on_logout: \"yes\" scope: openid session_secret: null skip_already_auth_requests: \"no\" ssl_verify: \"no\" timeout: null token_endpoint_auth_method: client_secret_post unauth_action: auth use_jwks: \"yes\" userinfo_header_name: X-USERINFO validate_scope: \"yes\" If your upstream service needs specific attributes, the header_claims and header_names config can be used to pass claims as request headers to the upstream service. A subset of the claims available: 1 2 3 4 5 6 7 8 9 10 \"idir_user_guid\": \"220469E030000000000000000A607C5\", \"identity_provider\": \"idir\", \"idir_username\": \"FLAST\", \"email_verified\": false, \"name\": \"First Last\", \"preferred_username\": \"220469e030000000000000a607c5@idir\", \"display_name\": \"XT:Last, First CITZ:IN\", \"given_name\": \"Last\", \"family_name\": \"First\", \"email\": \"last.first@email\" An example to get idir_username and email passed, would be: 1 2 header_claims: [ idir_username, email ] header_names: [ X-Idir-Username, X-User-Email ] acl The acl plugin will enforce that the user's client_roles includes the roles defined in the allow list. 1 2 3 4 5 6 7 8 9 plugins: - enabled: true name: acl tags: [ ns.$NS ] config: allow: - ROLE_FOR_ACCESS deny: null hide_groups_header: false If hide_groups_headers is false then X-Authenticated-Groups will be a request header with a comma-delimited list of roles that the user belongs to. request-transformer (optional) If your upstream service is stateless, then you can remove the cookie before the request is forwarded to it. 1 2 3 4 5 6 7 - name: request-transformer protocols: [http] tags: [ ns.$NS ] config: remove: headers: - Cookie","title":"2. Configure the APS Kong Gateway"},{"location":"guides/keycloak-rbac/#outcome","text":"Vanity url: my-application.apps.gov.bc.ca Protected by SSL *.apps.gov.bc.ca certificate Separation of concerns for authentication and authorization","title":"Outcome"},{"location":"guides/owner-journey/","text":"API Provider User Journey \u00b6 The following steps guide an API Provider through setting up an API on the BC Government API Gateway in a Test/Training instance. If you are ready to deploy to the Production instance, use the links available at the end of this document ( here ). 1. Register a New Namespace \u00b6 A namespace represents a collection of Kong Gateway Services and Routes that are managed independently. Create a new namespace: Log in to the API Services Portal as an API Provider using your IDIR. Click the namespace drop-down menu (top right next to your user name - it may show No Active Namespace ). Click Create New Namespace . Enter the Namespace name. Click Create. NOTE: The name must be a lowercase alphanumeric string between 5 and 15 characters (RegExp reference: ^[a-z][a-z0-9-]{4,14}$ ). You can manage namespaces by clicking the namespace drop-down menu and selecting the required namespace. 2. Generate a Service Account \u00b6 Go to the Namespaces tab. Click Service Accounts , then Cick New Service Account . Select the GatewayConfig.Publish permission for the Service Account and click Share . A new credential will be created - make a note of the ID and Secret . NOTE: Make sure to save the generated Client ID and Secret. The following list describes the permissions: Scope Permission Namespace.Manage Permission to update the Access Control List for controlling access to viewing metrics, service configuration and service account management (effectively a superuser for the namespace) Namespace.View Read-only access to the namespace GatewayConfig.Publish Permission to publish gateway configuration to Kong and view the status of the upstreams Content.Publish Permission to update the documentation on the portal CredentialIssuer.Admin Permission to create Authorization Profiles for integrating with third-party Identity Providers; yhe profiles are available to be used when configuring Product Environments Access.Manage Permission to approve/reject access requests to your APIs 3. Prepare Configuration \u00b6 The gateway configuration can be hand-crafted or you can use a command line interface that APS developed called gwa to convert your OpenAPI v3 spec to a Kong configuration. Run the following commands to create a basic configuration of a single service and route: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 export NS = \"<YOUR NAMESPACE>\" export NAME = \"a-service-for- $NS \" echo \" services: - name: $NAME host: httpbin.org tags: [ ns. $NS ] port: 443 protocol: https retries: 0 routes: - name: $NAME -route tags: [ ns. $NS ] hosts: - $NAME .api.gov.bc.ca paths: - / methods: - GET strip_path: false https_redirect_status_code: 426 path_handling: v0 request_buffering: true response_buffering: true \" > gwconfig.yaml Review the gwconfig.yaml file to see what it is doing. There is a single upstream service defined to be httpbin.org , and a single route $NAME.api.gov.bc.ca that passes all GET requests to the upstream service. To view common plugin configuration go to Common Controls To learn about other available plugins, navigate to Gateway > Plugins on the sidebar of this page. Declarative Config: DecK is used to sync your configuration with Kong; see https://docs.konghq.com/deck/overview/ for more information. Splitting Your Config: A namespace tag with the format ns.$NS is mandatory for each service/route/plugin. But, if you have separate pipelines for your environments (i.e., dev, test and prod), you can split your configuration and update the tags with the qualifier. For example, you can use a tag ns.$NS.dev to sync the Kong configuration for dev Service and Routes only. OCP Network Policies \u00b6 If your service is running on the Openshift platform, you should specify the Kubernetes Service in the Service.host . It must have the format: <name>.<ocp-namespace>.svc . Also, make sure your Service.port matches your Kubernetes Service Port. Any Security Policies for egress from the Gateway will be setup automatically on the API Gateway side. The Kong Gateway runs Data Planes in both Silver and Gold clusters. Silver Cluster You will need to create a Network Policy on your side similar to the following to allow the Gateway's test and prod environments to route traffic to your API: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 kind : NetworkPolicy apiVersion : networking.k8s.io/v1 metadata : name : allow-traffic-from-gateway-to-your-api spec : podSelector : matchLabels : name : my-upstream-api ingress : - from : - namespaceSelector : matchLabels : environment : test name : 264e6f - from : - namespaceSelector : matchLabels : environment : prod name : 264e6f Gold Cluster If your service is running on Gold, you will need to contact the APS team so that we can properly provision the namespace on the correct Kong Data Plane and ensure the correct DNS is setup for your routes. The following is the Network Policy on Gold. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 kind : NetworkPolicy apiVersion : networking.k8s.io/v1 metadata : name : allow-traffic-from-gateway-to-your-api spec : podSelector : matchLabels : name : my-upstream-api ingress : - from : - namespaceSelector : matchLabels : environment : test name : b8840c - from : - namespaceSelector : matchLabels : environment : prod name : b8840c Private Routing \u00b6 By default, publically available endpoints are created based on Kong Routes where the hosts must end with *.api.gov.bc.ca or *.apps.gov.bc.ca . There are use cases where the clients that are consuming the API are on the same Openshift platform that the API is deployed to. In this case, there is a security benefit of not making the API endpoints publically available. To support this, the route hosts can be updated with a host that follows the format: <api-name>.cluster.local . When the configuration is published to Kong, an Openshift Service is created with a corresponding Service Serving Certificate (SSC), which is routeable from within the Openshift cluster. An example Gateway configuration for an upstream API deployed in the Silver cluster would be: 1 2 3 4 5 6 7 8 9 10 11 12 services : - name : my-service host : httpbin.org tags : [ ns.$NS ] port : 443 protocol : https retries : 0 routes : - name : my-service-route tags : [ ns.$NS ] hosts : - my-service.cluster.local A new endpoint is then created in our Silver Test environment as: https://gw-my-service.264e6f-test.svc.cluster.local (if it was configured in our Prod environment, it would be: https://gw-my-service.264e6f-prod.svc.cluster.local ) To verify that the endpoint is callable, you can deploy a simple pod that mounts the service-ca to be used for verifying the SSC. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 apiVersion : v1 kind : ConfigMap metadata : name : tmp-ca annotations : service.beta.openshift.io/inject-cabundle : \"true\" data : {} --- apiVersion : apps/v1 kind : Deployment metadata : name : tmp-deployment labels : app : sleeper spec : replicas : 1 selector : matchLabels : app : sleeper template : metadata : labels : app : sleeper spec : volumes : - name : config configMap : name : tmp-ca containers : - name : idle image : docker.io/curlimages/curl:latest command : [ \"sh\" ] args : - -c - | sleep Infinite ports : - containerPort : 80 volumeMounts : - name : config mountPath : \"/config\" readOnly : true From the Pod's Terminal, you can then run: 1 2 curl -v --cacert /config/service-ca.crt \\ https://gw-my-service.264e6f-prod.svc.cluster.local/uuid You should see a 200 response with a valid UUID. Upstream mTLS \u00b6 Require mTLS between the Gateway and your Upstream Service? To support mTLS on your Upstream Service, you will need to provide client certificate details and if you want to verify the upstream endpoint then the ca_certificates and tls_verify is required as well. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 services : - name : my-upstream-service host : my-upstream.site tags : [ _NS_ ] port : 443 protocol : https tls_verify : true ca_certificates : [ 0a780ee0-626c-11eb-ae93-0242ac130012 ] client_certificate : 8fc131ef-9752-43a4-ba70-eb10ba442d4e routes : [ ... ] certificates : - cert : \"<PEM FORMAT>\" key : \"<PEM FORMAT>\" tags : [ _NS_ ] id : 8fc131ef-9752-43a4-ba70-eb10ba442d4e ca_certificates : - cert : \"<PEM FORMAT>\" tags : [ _NS_ ] id : 0a780ee0-626c-11eb-ae93-0242ac130012 NOTE: You must generate a UUID ( python -c 'import uuid; print(uuid.uuid4())' ) for each certificate and ca_certificate you create (set the id ) and reference it in your services details. HELPER: Python command to get a PEM file on one line: python -c 'import sys; import json; print(json.dumps(open(sys.argv[1]).read()))' my.pem Using an OpenAPI Spec \u00b6 Run: ./gwa new and follow the prompts. Example: 1 2 3 4 ./gwa new -o gwconfig.yaml \\ --route-host myapi.api.gov.bc.ca \\ --service-url https://httpbin.org \\ https://bcgov.github.io/gwa-api/openapi/simple.yaml See below for the gwa CLI install instructions. 4. Apply Gateway Configuration \u00b6 The Swagger console for the gwa-api can be used to publish the Kong Gateway configuration, or you can use the gwa Command Line . 4.1. gwa Command Line (recommended) \u00b6 Install (for Linux) 1 2 3 GWA_CLI_VERSION = v1.3.1 ; curl -L -O https://github.com/bcgov/gwa-cli/releases/download/ ${ GWA_CLI_VERSION } /gwa_ ${ GWA_CLI_VERSION } _linux_x64.zip unzip gwa_ ${ GWA_CLI_VERSION } _linux_x64.zip ./gwa --version Using MacOS or Windows? Download here: https://github.com/bcgov/gwa-cli/releases/tag/v1.3.1 NOTE: As of version 1.2+ there is support for v2 of the APS API. To continue using v1 of the API, ensure that the API Version is set to 1. Configure Run the following to configure a .env file that will hold all the env vars for running gwa : 1 2 3 ./gwa init -T --api-version=2 --namespace=<YOUR NAMESPACE> \\ --client-id=<YOUR SERVICE ACCOUNT ID> \\ --client-secret=<YOUR SERVICE ACCOUNT SECRET>` NOTE: Use the Client ID and Secret obtained from step 2. NOTE: The -T indicates the APS Test environment. For production use -P . Run ./gwa status to confirm that access to the Gateway is working. Publish 1 ./gwa pg gwconfig.yaml If you want to see the expected changes, but not actually apply them, you can run: 1 ./gwa pg --dry-run gwconfig.yaml 4.2. Swagger Console (optional) \u00b6 Go to gwa-api Swagger Console . Select the PUT /namespaces/{namespace}/gateway API. The Service Account uses the OAuth2 Client Credentials Grant Flow. Click the lock link (on the right) and enter the Service Account credentials generated in Section 2. For the Parameter namespace , enter the namespace you created in Section 1. Set dryRun to true . Select a configFile file. Send the request. 4.3. Postman (optional) \u00b6 From the Postman App, click Import and go to the Link tab. Enter the URL: https://openapi-to-postman.api.gov.bc.ca/?u=https://gwa-api-gov-bc-ca.test.api.gov.bc.ca/docs/v2/openapi.yaml After creation, go to Collections and right-click on the Gateway Administration (GWA) API collection and select edit . Go to the Authorization tab, enter your Client ID and Client Secret , and click Get New Access Token . You should get a successful dialog to proceed. Click Proceed and Use Token . You can verify that the token works by going to the Collection Return key information about authenticated identity and clicking Send . 4.4. Helm Chart \u00b6 There is a helm chart available that provisions resources on the API Gateway, API Services Portal and OCP (Network Policy). The helm chart is located at: https://github.com/bcgov/helm-charts/tree/master/charts/aps-gateway-ns The chart creates Jobs to provision the resources, and it expects secrets to be setup in the common Hashicorp Vault https://vault.developer.gov.bc.ca instance. Prepare a config.yaml file: update the security context for the particular OCP project the license plate af9xxx can be replaced with your own OCP license plate the secret example-dev should be the name of the secret that has the following keys defined (information from a APS Portal namespace Service Account): GWA_ACCT_ID GWA_ACCT_SECRET NAMESPACE TOKEN_URL GWA_INIT_FLAG : Set to either -T or -P representing the API Gateway environment update the Pod matching networkPolicy.matchLabels for the Network Policy for Ingress traffic from the API Gateway 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 podSecurityContext : fsGroup : 1013540000 securityContext : runAsUser : 1013540000 serviceAccount : create : false name : af9xxx-vault vault : authPath : auth/k8s-silver namespace : platform-services role : xxxxxx-nonprod secret : xxxxxx-nonprod/aps-gateway-creds networkPolicy : create : true namespaces : [ xxxxxx-dev , xxxxxx-test , xxxxxx-prod ] matchLabels : app.kubernetes.io/name : my-api services : [] directoryConfig : products : [] issuers : [] datasets : [] The yaml created earlier for the API Gateway ( gwconfig.yaml ) can be used as part of the helm configuration. Run Helm to install the Jobs: 1 2 helm repo add bcgov https://bcgov.github.io/helm-charts helm upgrade --install example -f config.yaml -f gwconfig.yaml bcgov/aps-gateway-ns 5. Verify Routes \u00b6 To verify that the Gateway can access the upstream services, run the command: ./gwa status . In the APS test environment, the hosts that you defined in the routes are altered. To see the actual hosts, log into the API Services Portal , go to the Namespaces tab, go to Gateway Services , and select your particular service to get the routing details. 1 2 3 curl https:// ${ NAME } -api-gov-bc-ca.test.api.gov.bc.ca/headers ab -n 20 -c 2 https:// ${ NAME } -api-gov-bc-ca.test.api.gov.bc.ca/headers 6. View Metrics \u00b6 You can view the following metrics in real-time for the Services that you configure on the Gateway: Request Rate : Requests / Second (by Service/Route, by HTTP Status) Latency : Standard deviations measured for latency inside Kong and on the Upstream Service (by Service/Route) Bandwidth : Ingress/egress bandwidth (by Service/Route) Total Requests : In 5 minute windows (by Consumer, by User Agent, by Service, by HTTP Status) All metrics can be viewed by an arbitrary time window; default is Last 24 Hours . Go to Grafana to view metrics for your configured services. You can also access summarized metrics from the API Services Portal by going to the Namespaces tab and clicking the Gateway Services link. NOTE: A shortcut to Grafana is provided from the Gateway Services page by clicking View metrics in real-time . 7. Grant Access to Other Users \u00b6 To grant access to other users, you need to grant them the appropriate Scopes. You can do this from the API Services Portal by selecting the relevant Namespace and going to the Namespaces Namespace Access page. From there, you can grant users access to the Namespace. 8. Add to your CI/CD Pipeline \u00b6 Update your CI/CD pipelines to run the gwa-cli to keep your services updated on the gateway. 8.1. Github Actions Example \u00b6 In the repository where you maintain your CI/CD Pipeline configuration, use the Service Account details from Section 2 to set up two Secrets : GWA_ACCT_ID GWA_ACCT_SECRET Add a .gwa folder (can be called anything) that will be used to hold your gateway configuration. Github Workflow example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 env : NS : \"<your namespace>\" jobs : build : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 with : fetch-depth : 0 - uses : actions/setup-node@v1 with : node-version : 10 TOKEN : ${{ secrets.GITHUB_TOKEN }} - name : Get GWA Command Line run : | curl -L -O https://github.com/bcgov/gwa-cli/releases/download/v1.3.1/gwa_v1.3.1_linux_x64.zip unzip gwa_v1.3.1_linux_x64.zip export PATH=`pwd`:$PATH - name : Apply Namespace Configuration run : | export PATH=`pwd`:$PATH cd .gwa/$NS gwa init -T \\ --namespace=$NS \\ --client-id=${{ secrets.TEST_GWA_ACCT_ID }} \\ --client-secret=${{ secrets.TEST_GWA_ACCT_SECRET }} gwa pg 8.2. Helm Chart \u00b6 1 2 helm repo add bcgov https://bcgov.github.io/helm-charts helm upgrade --install example -f config.yaml -f gwconfig.yaml bcgov/aps-gateway-ns 9. Share your API for Discovery \u00b6 Package your APIs and make them available for discovery through the API Services Portal and BC Data Catalogue. The API Services Portal Directory organizes your APIs by Datasets, Products and Environments. You can manage them via an API or through the UI. To use the Directory API, the following scopes are required: For contents (documentation), the service account must have the Content.Publish scope For datasets , products and environments , the service account must have the Namespace.Manage scope For credential issuers , the service account must have the CredentialIssuer.Admin scope How to update scopes: Click Namespaces in the navigation bar Click Namespace Access , and then Service accounts with access Click the ellipses to the right of the appropriate service account and select Edit Access View the Directory API: V1: V1 Directory API Console V2: V2 Directory API Console 9.1 Setup your Draft Dataset \u00b6 If you do not have a Dataset already defined in the BC Data Catalogue, you can create a draft in the API Services Portal: Click Help in the top right, then API Docs Click the green Authorize button, then enter your Client ID and Secret Click the PUT /namespaces/{ns}/datasets accordion item Click Try it out , enter your namespace, personalize any fields in the Request body, remove the lines pertaining to organization, and click Execute Scroll down and ensure a 200 Response was received 1 2 3 4 5 6 7 8 9 10 11 kind : DraftDataset name : my-draft-dataset organization : ministry-of-citizens-services organizationUnit : databc notes : Some information about this API tags : [ health , standards , openapi ] sector : Service license_title : Access Only view_audience : Government security_class : LOW-PUBLIC record_publish_date : \"2021-05-27\" List of available organizations: https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/organizations Use the following to get the organizationUnit : https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/console/#/Organizations/organization-units 9.2 Setup your Product \u00b6 How to add a Product: Navigate to Namespaces -> Products Click New Product in the top right How to associate Product with a Dataset: Click the ellipses next to Add Env Find your newly created dataset and click Update There are various patterns for protecting an API that the Kong API Gateway supports. In the following example, the API is protected with Kong's API Key and ACL plugins ( kong-api-key-acl flow). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 kind : Product appId : 2B04C28E08AW name : My API dataset : my-draft-dataset environments : - id : 1F7CA929 name : dev active : false approval : false legal : terms-of-use-for-api-gateway-1 flow : kong-api-key-acl additionalDetailsToRequest : Please provide a bit more of this services : [] - id : 2F7CA929 name : test active : false approval : true legal : terms-of-use-for-api-gateway-1 flow : kong-api-key-acl additionalDetailsToRequest : Asking for test environment? Please provide some more info services : [ a-service-for-$NS ] - id : 3F7CA929 name : prod active : false approval : true legal : terms-of-use-for-api-gateway-1 flow : client-credentials credentialIssuer : Resource Server $NS additionalDetailsToRequest : Production? Great, please provide X, Y and Z services : [] 9.3 Update Gateway Configuration \u00b6 In the previous section the example defined an environment that is protected using Kong's API Key and ACL plugins. To protect the Service, the corresponding plugins need to exist on the Gateway for that service or route. The ACL allow corresponds to the unique Environment ID defined in Section 9.2. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 plugins: - name: key-auth tags: [ ns.$NS ] protocols: [ http, https ] config: key_names: [\"X-API-KEY\"] run_on_preflight: true hide_credentials: true key_in_body: false - name: acl tags: [ ns.$NS ] config: hide_groups_header: true allow: [ <SEE ENVIRONMENT DETAIL> ] How to Update Gateway Configuration: In Namespaces -> Products, click edit next to product environment For Authorization, choose Kong API Key with ACL Flow. Assign Terms of Use if desired. Check Require Approval Click View Plugin Template, and add the plugin configuration to the service a-service-for-$NS in the gwconfig.yaml file you created in Section 3. Re-run the publish command: ./gwa pg gwconfig.yaml . This will protect the upstream service with an API Key. Back in the portal, click Continue Drag and drop the available service to Active Services Click Save 9.4 Check Access \u00b6 1 curl https://${NAME}-api-gov-bc-ca.test.api.gov.bc.ca/headers You can also get the URL by going to Namespaces -> Gateway Services and clicking the drop down arrow on the right. You will get an error: No API key found in request . 9.5 Get an API Key \u00b6 Go to the Namespaces tab in the API Services Portal . Click the Preview in Directory link in the Products panel. You will see a card with the title of the Dataset that you created in Section 9.1. Click the title, then click Request Access . Choose or create an Application , select the Dev environment, and click Request Access & Continue . Clicking Generate Secrets will generate your API Key. Make a note of the API Key and Client ID. If Require Approval was selected in section 9.3, navigate to Namespaces -> Consumers and accept the request. NOTE: An Environment can be configured for auto-approval. For the sample, Dev auto-approval is enabled so the Access Manager does not need to approve the request before getting access. When you run the command: 1 curl https://${NAME}-api-gov-bc-ca.test.api.gov.bc.ca/headers -H \"X-API-KEY: $KEY\" It should return header information similar to the following: 1 2 3 4 5 6 7 8 9 10 { \"headers\": { \"Accept\": \"*/*\", \"User-Agent\": \"curl/7.64.1\", \"X-Consumer-Custom-Id\": \"8ED11248-072EBB2791974533\", \"X-Consumer-Id\": \"db3a0658-c049-430e-b143-ce46685d8e20\", \"X-Consumer-Username\": \"8ED11248-072EBB2791974533\", \"X-Credential-Identifier\": \"a91bb07c-41a9-49b6-9481-155e9fd68dba\" } } 9.6 Manage Access \u00b6 NOTE: To manage access to your APIs, you must have the Access.Manage permission for the Namespace. As an Access Manager, you can manage the new Consumer by going to the Namespaces tab, and selecting Consumers . Here you should see the newly created Consumer. Click on the name . You can administer Controls such as rate limiting and IP restrictions. You can administer Authorization by toggling access to the particular Product and Environment. 9.7 Enabling for Discovery \u00b6 Once the content is complete and you have applied the appropriate controls to your API, you are ready to make it available on the API Directory. Prerequisite: Your namespace must be approved for use by a Ministry Organization Administrator. This is a one-time process to link the Ministry to the Namespace and can be requested here: https://dpdd.atlassian.net/servicedesk/customer/portal/1/group/2/create/118 Once approved, you must make an Environment active for the corresponding Product Environment to appear in the API Directory. You can do this by either updating the Product Environment configuration above to active: true , or going to the API Services Portal UI and editing the Environment details. 9.8 View Your Product in the API Directory \u00b6 Find your API in the API Services Portal Directory . It is now ready to receive access requests from the community! 10 What to try next? \u00b6 10.1 Connect with the BC Government API Community \u00b6 Post a message on Rocket.Chat #aps-ops . 10.2 Read Our Other Guides \u00b6 Find information about authentication and authorization patterns, reference implementations, plugin usage and much more. 10.3 Protect Your API using an External Identity Provider \u00b6 Use the client-credentials flow to protect your API (see Client Credential Protection ). 10.4 Use the Access Approval Process \u00b6 Enable approval for an Environment and go through the access request process by requesting access, and playing the role of Access Manager to review the request and approve access. 10.5 Publish Your Documentation on the Portal \u00b6 1 2 3 4 5 6 7 8 9 10 kind : Content title : Getting Started with Example API description : Getting Started with Example API externalLink : https://github.com/bcgov/$NS/getting_started.md content : \"all markdown content\" order : 1 tags : [ ns.$NS ] isComplete : true isPublic : true publishDate : \"2021-06-02T08:00:00.000-08:00\" Production Links \u00b6 API Services Portal gwa-api Swagger Console gwa-api Postman Collection Gateway Metrics - Grafana","title":"API Provider User Journey"},{"location":"guides/owner-journey/#api-provider-user-journey","text":"The following steps guide an API Provider through setting up an API on the BC Government API Gateway in a Test/Training instance. If you are ready to deploy to the Production instance, use the links available at the end of this document ( here ).","title":"API Provider User Journey"},{"location":"guides/owner-journey/#1-register-a-new-namespace","text":"A namespace represents a collection of Kong Gateway Services and Routes that are managed independently. Create a new namespace: Log in to the API Services Portal as an API Provider using your IDIR. Click the namespace drop-down menu (top right next to your user name - it may show No Active Namespace ). Click Create New Namespace . Enter the Namespace name. Click Create. NOTE: The name must be a lowercase alphanumeric string between 5 and 15 characters (RegExp reference: ^[a-z][a-z0-9-]{4,14}$ ). You can manage namespaces by clicking the namespace drop-down menu and selecting the required namespace.","title":"1. Register a New Namespace"},{"location":"guides/owner-journey/#2-generate-a-service-account","text":"Go to the Namespaces tab. Click Service Accounts , then Cick New Service Account . Select the GatewayConfig.Publish permission for the Service Account and click Share . A new credential will be created - make a note of the ID and Secret . NOTE: Make sure to save the generated Client ID and Secret. The following list describes the permissions: Scope Permission Namespace.Manage Permission to update the Access Control List for controlling access to viewing metrics, service configuration and service account management (effectively a superuser for the namespace) Namespace.View Read-only access to the namespace GatewayConfig.Publish Permission to publish gateway configuration to Kong and view the status of the upstreams Content.Publish Permission to update the documentation on the portal CredentialIssuer.Admin Permission to create Authorization Profiles for integrating with third-party Identity Providers; yhe profiles are available to be used when configuring Product Environments Access.Manage Permission to approve/reject access requests to your APIs","title":"2. Generate a Service Account"},{"location":"guides/owner-journey/#3-prepare-configuration","text":"The gateway configuration can be hand-crafted or you can use a command line interface that APS developed called gwa to convert your OpenAPI v3 spec to a Kong configuration. Run the following commands to create a basic configuration of a single service and route: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 export NS = \"<YOUR NAMESPACE>\" export NAME = \"a-service-for- $NS \" echo \" services: - name: $NAME host: httpbin.org tags: [ ns. $NS ] port: 443 protocol: https retries: 0 routes: - name: $NAME -route tags: [ ns. $NS ] hosts: - $NAME .api.gov.bc.ca paths: - / methods: - GET strip_path: false https_redirect_status_code: 426 path_handling: v0 request_buffering: true response_buffering: true \" > gwconfig.yaml Review the gwconfig.yaml file to see what it is doing. There is a single upstream service defined to be httpbin.org , and a single route $NAME.api.gov.bc.ca that passes all GET requests to the upstream service. To view common plugin configuration go to Common Controls To learn about other available plugins, navigate to Gateway > Plugins on the sidebar of this page. Declarative Config: DecK is used to sync your configuration with Kong; see https://docs.konghq.com/deck/overview/ for more information. Splitting Your Config: A namespace tag with the format ns.$NS is mandatory for each service/route/plugin. But, if you have separate pipelines for your environments (i.e., dev, test and prod), you can split your configuration and update the tags with the qualifier. For example, you can use a tag ns.$NS.dev to sync the Kong configuration for dev Service and Routes only.","title":"3. Prepare Configuration"},{"location":"guides/owner-journey/#ocp-network-policies","text":"If your service is running on the Openshift platform, you should specify the Kubernetes Service in the Service.host . It must have the format: <name>.<ocp-namespace>.svc . Also, make sure your Service.port matches your Kubernetes Service Port. Any Security Policies for egress from the Gateway will be setup automatically on the API Gateway side. The Kong Gateway runs Data Planes in both Silver and Gold clusters. Silver Cluster You will need to create a Network Policy on your side similar to the following to allow the Gateway's test and prod environments to route traffic to your API: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 kind : NetworkPolicy apiVersion : networking.k8s.io/v1 metadata : name : allow-traffic-from-gateway-to-your-api spec : podSelector : matchLabels : name : my-upstream-api ingress : - from : - namespaceSelector : matchLabels : environment : test name : 264e6f - from : - namespaceSelector : matchLabels : environment : prod name : 264e6f Gold Cluster If your service is running on Gold, you will need to contact the APS team so that we can properly provision the namespace on the correct Kong Data Plane and ensure the correct DNS is setup for your routes. The following is the Network Policy on Gold. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 kind : NetworkPolicy apiVersion : networking.k8s.io/v1 metadata : name : allow-traffic-from-gateway-to-your-api spec : podSelector : matchLabels : name : my-upstream-api ingress : - from : - namespaceSelector : matchLabels : environment : test name : b8840c - from : - namespaceSelector : matchLabels : environment : prod name : b8840c","title":"OCP Network Policies"},{"location":"guides/owner-journey/#private-routing","text":"By default, publically available endpoints are created based on Kong Routes where the hosts must end with *.api.gov.bc.ca or *.apps.gov.bc.ca . There are use cases where the clients that are consuming the API are on the same Openshift platform that the API is deployed to. In this case, there is a security benefit of not making the API endpoints publically available. To support this, the route hosts can be updated with a host that follows the format: <api-name>.cluster.local . When the configuration is published to Kong, an Openshift Service is created with a corresponding Service Serving Certificate (SSC), which is routeable from within the Openshift cluster. An example Gateway configuration for an upstream API deployed in the Silver cluster would be: 1 2 3 4 5 6 7 8 9 10 11 12 services : - name : my-service host : httpbin.org tags : [ ns.$NS ] port : 443 protocol : https retries : 0 routes : - name : my-service-route tags : [ ns.$NS ] hosts : - my-service.cluster.local A new endpoint is then created in our Silver Test environment as: https://gw-my-service.264e6f-test.svc.cluster.local (if it was configured in our Prod environment, it would be: https://gw-my-service.264e6f-prod.svc.cluster.local ) To verify that the endpoint is callable, you can deploy a simple pod that mounts the service-ca to be used for verifying the SSC. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 apiVersion : v1 kind : ConfigMap metadata : name : tmp-ca annotations : service.beta.openshift.io/inject-cabundle : \"true\" data : {} --- apiVersion : apps/v1 kind : Deployment metadata : name : tmp-deployment labels : app : sleeper spec : replicas : 1 selector : matchLabels : app : sleeper template : metadata : labels : app : sleeper spec : volumes : - name : config configMap : name : tmp-ca containers : - name : idle image : docker.io/curlimages/curl:latest command : [ \"sh\" ] args : - -c - | sleep Infinite ports : - containerPort : 80 volumeMounts : - name : config mountPath : \"/config\" readOnly : true From the Pod's Terminal, you can then run: 1 2 curl -v --cacert /config/service-ca.crt \\ https://gw-my-service.264e6f-prod.svc.cluster.local/uuid You should see a 200 response with a valid UUID.","title":"Private Routing"},{"location":"guides/owner-journey/#upstream-mtls","text":"Require mTLS between the Gateway and your Upstream Service? To support mTLS on your Upstream Service, you will need to provide client certificate details and if you want to verify the upstream endpoint then the ca_certificates and tls_verify is required as well. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 services : - name : my-upstream-service host : my-upstream.site tags : [ _NS_ ] port : 443 protocol : https tls_verify : true ca_certificates : [ 0a780ee0-626c-11eb-ae93-0242ac130012 ] client_certificate : 8fc131ef-9752-43a4-ba70-eb10ba442d4e routes : [ ... ] certificates : - cert : \"<PEM FORMAT>\" key : \"<PEM FORMAT>\" tags : [ _NS_ ] id : 8fc131ef-9752-43a4-ba70-eb10ba442d4e ca_certificates : - cert : \"<PEM FORMAT>\" tags : [ _NS_ ] id : 0a780ee0-626c-11eb-ae93-0242ac130012 NOTE: You must generate a UUID ( python -c 'import uuid; print(uuid.uuid4())' ) for each certificate and ca_certificate you create (set the id ) and reference it in your services details. HELPER: Python command to get a PEM file on one line: python -c 'import sys; import json; print(json.dumps(open(sys.argv[1]).read()))' my.pem","title":"Upstream mTLS"},{"location":"guides/owner-journey/#using-an-openapi-spec","text":"Run: ./gwa new and follow the prompts. Example: 1 2 3 4 ./gwa new -o gwconfig.yaml \\ --route-host myapi.api.gov.bc.ca \\ --service-url https://httpbin.org \\ https://bcgov.github.io/gwa-api/openapi/simple.yaml See below for the gwa CLI install instructions.","title":"Using an OpenAPI Spec"},{"location":"guides/owner-journey/#4-apply-gateway-configuration","text":"The Swagger console for the gwa-api can be used to publish the Kong Gateway configuration, or you can use the gwa Command Line .","title":"4. Apply Gateway Configuration"},{"location":"guides/owner-journey/#41-gwa-command-line-recommended","text":"Install (for Linux) 1 2 3 GWA_CLI_VERSION = v1.3.1 ; curl -L -O https://github.com/bcgov/gwa-cli/releases/download/ ${ GWA_CLI_VERSION } /gwa_ ${ GWA_CLI_VERSION } _linux_x64.zip unzip gwa_ ${ GWA_CLI_VERSION } _linux_x64.zip ./gwa --version Using MacOS or Windows? Download here: https://github.com/bcgov/gwa-cli/releases/tag/v1.3.1 NOTE: As of version 1.2+ there is support for v2 of the APS API. To continue using v1 of the API, ensure that the API Version is set to 1. Configure Run the following to configure a .env file that will hold all the env vars for running gwa : 1 2 3 ./gwa init -T --api-version=2 --namespace=<YOUR NAMESPACE> \\ --client-id=<YOUR SERVICE ACCOUNT ID> \\ --client-secret=<YOUR SERVICE ACCOUNT SECRET>` NOTE: Use the Client ID and Secret obtained from step 2. NOTE: The -T indicates the APS Test environment. For production use -P . Run ./gwa status to confirm that access to the Gateway is working. Publish 1 ./gwa pg gwconfig.yaml If you want to see the expected changes, but not actually apply them, you can run: 1 ./gwa pg --dry-run gwconfig.yaml","title":"4.1. gwa Command Line (recommended)"},{"location":"guides/owner-journey/#42-swagger-console-optional","text":"Go to gwa-api Swagger Console . Select the PUT /namespaces/{namespace}/gateway API. The Service Account uses the OAuth2 Client Credentials Grant Flow. Click the lock link (on the right) and enter the Service Account credentials generated in Section 2. For the Parameter namespace , enter the namespace you created in Section 1. Set dryRun to true . Select a configFile file. Send the request.","title":"4.2. Swagger Console (optional)"},{"location":"guides/owner-journey/#43-postman-optional","text":"From the Postman App, click Import and go to the Link tab. Enter the URL: https://openapi-to-postman.api.gov.bc.ca/?u=https://gwa-api-gov-bc-ca.test.api.gov.bc.ca/docs/v2/openapi.yaml After creation, go to Collections and right-click on the Gateway Administration (GWA) API collection and select edit . Go to the Authorization tab, enter your Client ID and Client Secret , and click Get New Access Token . You should get a successful dialog to proceed. Click Proceed and Use Token . You can verify that the token works by going to the Collection Return key information about authenticated identity and clicking Send .","title":"4.3. Postman (optional)"},{"location":"guides/owner-journey/#44-helm-chart","text":"There is a helm chart available that provisions resources on the API Gateway, API Services Portal and OCP (Network Policy). The helm chart is located at: https://github.com/bcgov/helm-charts/tree/master/charts/aps-gateway-ns The chart creates Jobs to provision the resources, and it expects secrets to be setup in the common Hashicorp Vault https://vault.developer.gov.bc.ca instance. Prepare a config.yaml file: update the security context for the particular OCP project the license plate af9xxx can be replaced with your own OCP license plate the secret example-dev should be the name of the secret that has the following keys defined (information from a APS Portal namespace Service Account): GWA_ACCT_ID GWA_ACCT_SECRET NAMESPACE TOKEN_URL GWA_INIT_FLAG : Set to either -T or -P representing the API Gateway environment update the Pod matching networkPolicy.matchLabels for the Network Policy for Ingress traffic from the API Gateway 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 podSecurityContext : fsGroup : 1013540000 securityContext : runAsUser : 1013540000 serviceAccount : create : false name : af9xxx-vault vault : authPath : auth/k8s-silver namespace : platform-services role : xxxxxx-nonprod secret : xxxxxx-nonprod/aps-gateway-creds networkPolicy : create : true namespaces : [ xxxxxx-dev , xxxxxx-test , xxxxxx-prod ] matchLabels : app.kubernetes.io/name : my-api services : [] directoryConfig : products : [] issuers : [] datasets : [] The yaml created earlier for the API Gateway ( gwconfig.yaml ) can be used as part of the helm configuration. Run Helm to install the Jobs: 1 2 helm repo add bcgov https://bcgov.github.io/helm-charts helm upgrade --install example -f config.yaml -f gwconfig.yaml bcgov/aps-gateway-ns","title":"4.4. Helm Chart"},{"location":"guides/owner-journey/#5-verify-routes","text":"To verify that the Gateway can access the upstream services, run the command: ./gwa status . In the APS test environment, the hosts that you defined in the routes are altered. To see the actual hosts, log into the API Services Portal , go to the Namespaces tab, go to Gateway Services , and select your particular service to get the routing details. 1 2 3 curl https:// ${ NAME } -api-gov-bc-ca.test.api.gov.bc.ca/headers ab -n 20 -c 2 https:// ${ NAME } -api-gov-bc-ca.test.api.gov.bc.ca/headers","title":"5. Verify Routes"},{"location":"guides/owner-journey/#6-view-metrics","text":"You can view the following metrics in real-time for the Services that you configure on the Gateway: Request Rate : Requests / Second (by Service/Route, by HTTP Status) Latency : Standard deviations measured for latency inside Kong and on the Upstream Service (by Service/Route) Bandwidth : Ingress/egress bandwidth (by Service/Route) Total Requests : In 5 minute windows (by Consumer, by User Agent, by Service, by HTTP Status) All metrics can be viewed by an arbitrary time window; default is Last 24 Hours . Go to Grafana to view metrics for your configured services. You can also access summarized metrics from the API Services Portal by going to the Namespaces tab and clicking the Gateway Services link. NOTE: A shortcut to Grafana is provided from the Gateway Services page by clicking View metrics in real-time .","title":"6. View Metrics"},{"location":"guides/owner-journey/#7-grant-access-to-other-users","text":"To grant access to other users, you need to grant them the appropriate Scopes. You can do this from the API Services Portal by selecting the relevant Namespace and going to the Namespaces Namespace Access page. From there, you can grant users access to the Namespace.","title":"7. Grant Access to Other Users"},{"location":"guides/owner-journey/#8-add-to-your-cicd-pipeline","text":"Update your CI/CD pipelines to run the gwa-cli to keep your services updated on the gateway.","title":"8. Add to your CI/CD Pipeline"},{"location":"guides/owner-journey/#81-github-actions-example","text":"In the repository where you maintain your CI/CD Pipeline configuration, use the Service Account details from Section 2 to set up two Secrets : GWA_ACCT_ID GWA_ACCT_SECRET Add a .gwa folder (can be called anything) that will be used to hold your gateway configuration. Github Workflow example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 env : NS : \"<your namespace>\" jobs : build : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 with : fetch-depth : 0 - uses : actions/setup-node@v1 with : node-version : 10 TOKEN : ${{ secrets.GITHUB_TOKEN }} - name : Get GWA Command Line run : | curl -L -O https://github.com/bcgov/gwa-cli/releases/download/v1.3.1/gwa_v1.3.1_linux_x64.zip unzip gwa_v1.3.1_linux_x64.zip export PATH=`pwd`:$PATH - name : Apply Namespace Configuration run : | export PATH=`pwd`:$PATH cd .gwa/$NS gwa init -T \\ --namespace=$NS \\ --client-id=${{ secrets.TEST_GWA_ACCT_ID }} \\ --client-secret=${{ secrets.TEST_GWA_ACCT_SECRET }} gwa pg","title":"8.1. Github Actions Example"},{"location":"guides/owner-journey/#82-helm-chart","text":"1 2 helm repo add bcgov https://bcgov.github.io/helm-charts helm upgrade --install example -f config.yaml -f gwconfig.yaml bcgov/aps-gateway-ns","title":"8.2. Helm Chart"},{"location":"guides/owner-journey/#9-share-your-api-for-discovery","text":"Package your APIs and make them available for discovery through the API Services Portal and BC Data Catalogue. The API Services Portal Directory organizes your APIs by Datasets, Products and Environments. You can manage them via an API or through the UI. To use the Directory API, the following scopes are required: For contents (documentation), the service account must have the Content.Publish scope For datasets , products and environments , the service account must have the Namespace.Manage scope For credential issuers , the service account must have the CredentialIssuer.Admin scope How to update scopes: Click Namespaces in the navigation bar Click Namespace Access , and then Service accounts with access Click the ellipses to the right of the appropriate service account and select Edit Access View the Directory API: V1: V1 Directory API Console V2: V2 Directory API Console","title":"9. Share your API for Discovery"},{"location":"guides/owner-journey/#91-setup-your-draft-dataset","text":"If you do not have a Dataset already defined in the BC Data Catalogue, you can create a draft in the API Services Portal: Click Help in the top right, then API Docs Click the green Authorize button, then enter your Client ID and Secret Click the PUT /namespaces/{ns}/datasets accordion item Click Try it out , enter your namespace, personalize any fields in the Request body, remove the lines pertaining to organization, and click Execute Scroll down and ensure a 200 Response was received 1 2 3 4 5 6 7 8 9 10 11 kind : DraftDataset name : my-draft-dataset organization : ministry-of-citizens-services organizationUnit : databc notes : Some information about this API tags : [ health , standards , openapi ] sector : Service license_title : Access Only view_audience : Government security_class : LOW-PUBLIC record_publish_date : \"2021-05-27\" List of available organizations: https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/organizations Use the following to get the organizationUnit : https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/console/#/Organizations/organization-units","title":"9.1 Setup your Draft Dataset"},{"location":"guides/owner-journey/#92-setup-your-product","text":"How to add a Product: Navigate to Namespaces -> Products Click New Product in the top right How to associate Product with a Dataset: Click the ellipses next to Add Env Find your newly created dataset and click Update There are various patterns for protecting an API that the Kong API Gateway supports. In the following example, the API is protected with Kong's API Key and ACL plugins ( kong-api-key-acl flow). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 kind : Product appId : 2B04C28E08AW name : My API dataset : my-draft-dataset environments : - id : 1F7CA929 name : dev active : false approval : false legal : terms-of-use-for-api-gateway-1 flow : kong-api-key-acl additionalDetailsToRequest : Please provide a bit more of this services : [] - id : 2F7CA929 name : test active : false approval : true legal : terms-of-use-for-api-gateway-1 flow : kong-api-key-acl additionalDetailsToRequest : Asking for test environment? Please provide some more info services : [ a-service-for-$NS ] - id : 3F7CA929 name : prod active : false approval : true legal : terms-of-use-for-api-gateway-1 flow : client-credentials credentialIssuer : Resource Server $NS additionalDetailsToRequest : Production? Great, please provide X, Y and Z services : []","title":"9.2 Setup your Product"},{"location":"guides/owner-journey/#93-update-gateway-configuration","text":"In the previous section the example defined an environment that is protected using Kong's API Key and ACL plugins. To protect the Service, the corresponding plugins need to exist on the Gateway for that service or route. The ACL allow corresponds to the unique Environment ID defined in Section 9.2. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 plugins: - name: key-auth tags: [ ns.$NS ] protocols: [ http, https ] config: key_names: [\"X-API-KEY\"] run_on_preflight: true hide_credentials: true key_in_body: false - name: acl tags: [ ns.$NS ] config: hide_groups_header: true allow: [ <SEE ENVIRONMENT DETAIL> ] How to Update Gateway Configuration: In Namespaces -> Products, click edit next to product environment For Authorization, choose Kong API Key with ACL Flow. Assign Terms of Use if desired. Check Require Approval Click View Plugin Template, and add the plugin configuration to the service a-service-for-$NS in the gwconfig.yaml file you created in Section 3. Re-run the publish command: ./gwa pg gwconfig.yaml . This will protect the upstream service with an API Key. Back in the portal, click Continue Drag and drop the available service to Active Services Click Save","title":"9.3 Update Gateway Configuration"},{"location":"guides/owner-journey/#94-check-access","text":"1 curl https://${NAME}-api-gov-bc-ca.test.api.gov.bc.ca/headers You can also get the URL by going to Namespaces -> Gateway Services and clicking the drop down arrow on the right. You will get an error: No API key found in request .","title":"9.4 Check Access"},{"location":"guides/owner-journey/#95-get-an-api-key","text":"Go to the Namespaces tab in the API Services Portal . Click the Preview in Directory link in the Products panel. You will see a card with the title of the Dataset that you created in Section 9.1. Click the title, then click Request Access . Choose or create an Application , select the Dev environment, and click Request Access & Continue . Clicking Generate Secrets will generate your API Key. Make a note of the API Key and Client ID. If Require Approval was selected in section 9.3, navigate to Namespaces -> Consumers and accept the request. NOTE: An Environment can be configured for auto-approval. For the sample, Dev auto-approval is enabled so the Access Manager does not need to approve the request before getting access. When you run the command: 1 curl https://${NAME}-api-gov-bc-ca.test.api.gov.bc.ca/headers -H \"X-API-KEY: $KEY\" It should return header information similar to the following: 1 2 3 4 5 6 7 8 9 10 { \"headers\": { \"Accept\": \"*/*\", \"User-Agent\": \"curl/7.64.1\", \"X-Consumer-Custom-Id\": \"8ED11248-072EBB2791974533\", \"X-Consumer-Id\": \"db3a0658-c049-430e-b143-ce46685d8e20\", \"X-Consumer-Username\": \"8ED11248-072EBB2791974533\", \"X-Credential-Identifier\": \"a91bb07c-41a9-49b6-9481-155e9fd68dba\" } }","title":"9.5 Get an API Key"},{"location":"guides/owner-journey/#96-manage-access","text":"NOTE: To manage access to your APIs, you must have the Access.Manage permission for the Namespace. As an Access Manager, you can manage the new Consumer by going to the Namespaces tab, and selecting Consumers . Here you should see the newly created Consumer. Click on the name . You can administer Controls such as rate limiting and IP restrictions. You can administer Authorization by toggling access to the particular Product and Environment.","title":"9.6 Manage Access"},{"location":"guides/owner-journey/#97-enabling-for-discovery","text":"Once the content is complete and you have applied the appropriate controls to your API, you are ready to make it available on the API Directory. Prerequisite: Your namespace must be approved for use by a Ministry Organization Administrator. This is a one-time process to link the Ministry to the Namespace and can be requested here: https://dpdd.atlassian.net/servicedesk/customer/portal/1/group/2/create/118 Once approved, you must make an Environment active for the corresponding Product Environment to appear in the API Directory. You can do this by either updating the Product Environment configuration above to active: true , or going to the API Services Portal UI and editing the Environment details.","title":"9.7 Enabling for Discovery"},{"location":"guides/owner-journey/#98-view-your-product-in-the-api-directory","text":"Find your API in the API Services Portal Directory . It is now ready to receive access requests from the community!","title":"9.8 View Your Product in the API Directory"},{"location":"guides/owner-journey/#10-what-to-try-next","text":"","title":"10 What to try next?"},{"location":"guides/owner-journey/#101-connect-with-the-bc-government-api-community","text":"Post a message on Rocket.Chat #aps-ops .","title":"10.1 Connect with the BC Government API Community"},{"location":"guides/owner-journey/#102-read-our-other-guides","text":"Find information about authentication and authorization patterns, reference implementations, plugin usage and much more.","title":"10.2 Read Our Other Guides"},{"location":"guides/owner-journey/#103-protect-your-api-using-an-external-identity-provider","text":"Use the client-credentials flow to protect your API (see Client Credential Protection ).","title":"10.3 Protect Your API using an External Identity Provider"},{"location":"guides/owner-journey/#104-use-the-access-approval-process","text":"Enable approval for an Environment and go through the access request process by requesting access, and playing the role of Access Manager to review the request and approve access.","title":"10.4 Use the Access Approval Process"},{"location":"guides/owner-journey/#105-publish-your-documentation-on-the-portal","text":"1 2 3 4 5 6 7 8 9 10 kind : Content title : Getting Started with Example API description : Getting Started with Example API externalLink : https://github.com/bcgov/$NS/getting_started.md content : \"all markdown content\" order : 1 tags : [ ns.$NS ] isComplete : true isPublic : true publishDate : \"2021-06-02T08:00:00.000-08:00\"","title":"10.5 Publish Your Documentation on the Portal"},{"location":"guides/owner-journey/#production-links","text":"API Services Portal gwa-api Swagger Console gwa-api Postman Collection Gateway Metrics - Grafana","title":"Production Links"},{"location":"guides/prom-query/","text":"Query Kong Metrics Using Service Account \u00b6 Overview \u00b6 Using a service account generated within your namespace, you can send Prometheus queries to retrieve Kong metrics. Some examples will be provided, but any PromQL (Prometheus Query Language) query can be sent. Prerequisites \u00b6 Namespace in the API Gateway Service Account associated with the namespace Service Account should have at least Namespace.View permissions Ideally an active service experiencing some traffic TL;DR \u00b6 Generate an access token with your Service Account. Use the token to send PromQL queries with the following command. Note that queries should be URL encoded. 1 curl -v -H \"Authorization: Bearer <access-token>\" \"<prom-query-url>/api/v1/<query>\" Detailed Instructions \u00b6 Getting an Access Token \u00b6 Using your Service Account credentials, generate an access token: 1 2 3 4 5 6 7 export CID = my-client-id export CSC = my-client-secret export TOKEN_URL = my-token-url curl $TOKEN_URL -X POST -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d client_id = $CID -d client_secret = $CSC \\ -d grant_type = client_credentials -d scopes = openid Copy and save the access token: 1 export TOK = my-copied-access-token Running Queries \u00b6 Once you have an access token, you can run queries using: 1 curl -v -H \"Authorization: Bearer $TOK \" \"<prom-query-url>/api/v1/<query>\" Example Queries \u00b6 Reminder that if you wish to modify the PromQL queries, it should be URL encoded before sending the request. Run the following before running the example queries below: 1 2 3 export PQ_URL = https://gw-pql.api.gov.bc.ca/api/v1 # Can also query dev and test environments. Replace <env> with either dev or test: # export PQ_URL=https://gw-pql-api-gov-bc-ca.<env>.api.gov.bc.ca/api/v1 To execute queries \u00b6 Run one of the export QUERY=... example blocks, then run one of the Execute ... blocks below to execute that query: 1 2 # Execute at current server timestamp: curl -v -H \"Authorization: Bearer $TOK \" \" $PQ_URL /query?query= $QUERY \" 1 2 3 4 # Execute at specific time, eg 5 days ago: export FIVE_DAYS_AGO = $(($( date + '%s' ) - ( 60 * 60 * 24 * 5 )) ) curl -v -H \"Authorization: Bearer $TOK \" \" $PQ_URL /query?query= $QUERY &time= $FIVE_DAYS_AGO \" 1 2 3 4 5 6 # Execute using /query_range: export END = $( date + '%s' ) # End of time range. Example uses current UNIX time. export START = $(( $END - ( 60 * 60 * 5 )) ) # Start of time range. Example subtracts 5h from END time. export STEP = 300 # Number of seconds the query steps before evaluating. Eg: evaluate at START + 0s, then START + 300s, etc. curl -v -H \"Authorization: Bearer $TOK \" \" $PQ_URL /query_range?query= $QUERY &start= $START &end= $END &step= $STEP \" Rate per Second per route/service by Status Code \u00b6 1 2 3 4 # Raw PromQL Query: # sum(rate(kong_http_status{service=~\".*\", route=~\".*\"}[1m])) by (service,code) export QUERY = sum%28rate%28kong_http_status%7Bservice%3D~%22.%2A%22%2C%20route%3D~%22.%2A%22%7D%5B1m%5D%29%29%20by%20%28service%2Ccode%29 Req/5m per route/service \u00b6 1 2 3 4 # Raw PromQL Query: # sum(increase(kong_http_status{service=~\".*\", route=~\".*\"}[5m])) by (service,code) != 0 export QUERY = sum%28increase%28kong_http_status%7Bservice%3D~%22.%2A%22%2C%20route%3D~%22.%2A%22%7D%5B5m%5D%29%29%20by%20%28service%2Ccode%29%20%21%3D%200 Request time per Service \u00b6 Raw PromQL Query: 1 2 3 4 5 # Raw PromQL Query: # histogram_quantile(0.95, sum(rate(kong_latency_bucket{type=\"request\", service =~ \".*\",route=~\".*\"}[1m])) by (service,le)) export QUANTILE = 0 .95 export QUERY = histogram_quantile%280.95%2C%20sum%28rate%28kong_latency_bucket%7Btype%3D%22request%22%2C%20service%20%3D~%20%22.%2A%22%2Croute%3D~%22.%2A%22%7D%5B1m%5D%29%29%20by%20%28service%2Cle%29%29 Total Non-200 requests per second by route, code \u00b6 1 2 3 4 # Raw PromQL Query: # sum(rate(kong_http_status{code!=\"200\",code!=\"204\",code!=\"201\"}[5m])) by (route,code) != 0 export QUERY = sum%28rate%28kong_http_status%7Bcode%21%3D%22200%22%2Ccode%21%3D%22204%22%2Ccode%21%3D%22201%22%7D%5B5m%5D%29%29%20by%20%28route%2Ccode%29%20%21%3D%200 Help \u00b6 Prometheus HTTP API Documentation \u00b6 View the Prometheus HTTP API Documentation for additional information on sending requests to the Prometheus API. Some helpful takeaways: Send a GET request to the /metadata endpoint to list all available metrics. You can limit the number of results using the ?limit=<number> query string parameter Use the ?metric=<string> qsp to get information about a specific metric. Use /labels to get a list of available labels. Use /label/<label_value>/values to get possible values for a given label_value Use /series to get a list of time series that match a given label set. View Prometheus API docs for more info. PromQL \u00b6 Check out the QUERYING PROMETHEUS documentation for the basics of forming PromQL queries. I also felt this video was useful for learning PromQL basics. Grafana and Additional Queries \u00b6 We have a number of panels in our Grafana dashboards showcasing a number of queries. Here some examples of on our dashboard, along with the associated PromQL queries: Total Requests per second sum(rate(kong_http_status[1m])) Kong Proxy Latency per Service histogram_quantile(0.90, sum(rate(kong_latency_bucket{type=\"kong\", service =~ \". \",route=~\". \",1m])) by (service,le)) Upstream Time per Service histogram_quantile(0.90, sum(rate(kong_latency_bucket{type=\"upstream\", service =~ \". \",route=~\". \",}[1m])) by (service,le)) Total Requests (5m) by Consumer sum(increase(konglog_service_consumer_counter{service=~\".*\",consumer!=\"\"}[5m])) by (consumer, service, status) != 0 400 and 500 Errors sum(increase(konglog_service_agent_counter{status!='200',status!='201',status!='204',status!='206',status!='301',status!='302',status!='304',service!=''}[5m])) by (service, status) != 0","title":"Query Kong Metrics Using Service Account"},{"location":"guides/prom-query/#query-kong-metrics-using-service-account","text":"","title":"Query Kong Metrics Using Service Account"},{"location":"guides/prom-query/#overview","text":"Using a service account generated within your namespace, you can send Prometheus queries to retrieve Kong metrics. Some examples will be provided, but any PromQL (Prometheus Query Language) query can be sent.","title":"Overview"},{"location":"guides/prom-query/#prerequisites","text":"Namespace in the API Gateway Service Account associated with the namespace Service Account should have at least Namespace.View permissions Ideally an active service experiencing some traffic","title":"Prerequisites"},{"location":"guides/prom-query/#tldr","text":"Generate an access token with your Service Account. Use the token to send PromQL queries with the following command. Note that queries should be URL encoded. 1 curl -v -H \"Authorization: Bearer <access-token>\" \"<prom-query-url>/api/v1/<query>\"","title":"TL;DR"},{"location":"guides/prom-query/#detailed-instructions","text":"","title":"Detailed Instructions"},{"location":"guides/prom-query/#getting-an-access-token","text":"Using your Service Account credentials, generate an access token: 1 2 3 4 5 6 7 export CID = my-client-id export CSC = my-client-secret export TOKEN_URL = my-token-url curl $TOKEN_URL -X POST -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d client_id = $CID -d client_secret = $CSC \\ -d grant_type = client_credentials -d scopes = openid Copy and save the access token: 1 export TOK = my-copied-access-token","title":"Getting an Access Token"},{"location":"guides/prom-query/#running-queries","text":"Once you have an access token, you can run queries using: 1 curl -v -H \"Authorization: Bearer $TOK \" \"<prom-query-url>/api/v1/<query>\"","title":"Running Queries"},{"location":"guides/prom-query/#example-queries","text":"Reminder that if you wish to modify the PromQL queries, it should be URL encoded before sending the request. Run the following before running the example queries below: 1 2 3 export PQ_URL = https://gw-pql.api.gov.bc.ca/api/v1 # Can also query dev and test environments. Replace <env> with either dev or test: # export PQ_URL=https://gw-pql-api-gov-bc-ca.<env>.api.gov.bc.ca/api/v1","title":"Example Queries"},{"location":"guides/prom-query/#to-execute-queries","text":"Run one of the export QUERY=... example blocks, then run one of the Execute ... blocks below to execute that query: 1 2 # Execute at current server timestamp: curl -v -H \"Authorization: Bearer $TOK \" \" $PQ_URL /query?query= $QUERY \" 1 2 3 4 # Execute at specific time, eg 5 days ago: export FIVE_DAYS_AGO = $(($( date + '%s' ) - ( 60 * 60 * 24 * 5 )) ) curl -v -H \"Authorization: Bearer $TOK \" \" $PQ_URL /query?query= $QUERY &time= $FIVE_DAYS_AGO \" 1 2 3 4 5 6 # Execute using /query_range: export END = $( date + '%s' ) # End of time range. Example uses current UNIX time. export START = $(( $END - ( 60 * 60 * 5 )) ) # Start of time range. Example subtracts 5h from END time. export STEP = 300 # Number of seconds the query steps before evaluating. Eg: evaluate at START + 0s, then START + 300s, etc. curl -v -H \"Authorization: Bearer $TOK \" \" $PQ_URL /query_range?query= $QUERY &start= $START &end= $END &step= $STEP \"","title":"To execute queries"},{"location":"guides/prom-query/#rate-per-second-per-routeservice-by-status-code","text":"1 2 3 4 # Raw PromQL Query: # sum(rate(kong_http_status{service=~\".*\", route=~\".*\"}[1m])) by (service,code) export QUERY = sum%28rate%28kong_http_status%7Bservice%3D~%22.%2A%22%2C%20route%3D~%22.%2A%22%7D%5B1m%5D%29%29%20by%20%28service%2Ccode%29","title":"Rate per Second per route/service by Status Code"},{"location":"guides/prom-query/#req5m-per-routeservice","text":"1 2 3 4 # Raw PromQL Query: # sum(increase(kong_http_status{service=~\".*\", route=~\".*\"}[5m])) by (service,code) != 0 export QUERY = sum%28increase%28kong_http_status%7Bservice%3D~%22.%2A%22%2C%20route%3D~%22.%2A%22%7D%5B5m%5D%29%29%20by%20%28service%2Ccode%29%20%21%3D%200","title":"Req/5m per route/service"},{"location":"guides/prom-query/#request-time-per-service","text":"Raw PromQL Query: 1 2 3 4 5 # Raw PromQL Query: # histogram_quantile(0.95, sum(rate(kong_latency_bucket{type=\"request\", service =~ \".*\",route=~\".*\"}[1m])) by (service,le)) export QUANTILE = 0 .95 export QUERY = histogram_quantile%280.95%2C%20sum%28rate%28kong_latency_bucket%7Btype%3D%22request%22%2C%20service%20%3D~%20%22.%2A%22%2Croute%3D~%22.%2A%22%7D%5B1m%5D%29%29%20by%20%28service%2Cle%29%29","title":"Request time per Service"},{"location":"guides/prom-query/#total-non-200-requests-per-second-by-route-code","text":"1 2 3 4 # Raw PromQL Query: # sum(rate(kong_http_status{code!=\"200\",code!=\"204\",code!=\"201\"}[5m])) by (route,code) != 0 export QUERY = sum%28rate%28kong_http_status%7Bcode%21%3D%22200%22%2Ccode%21%3D%22204%22%2Ccode%21%3D%22201%22%7D%5B5m%5D%29%29%20by%20%28route%2Ccode%29%20%21%3D%200","title":"Total Non-200 requests per second by route, code"},{"location":"guides/prom-query/#help","text":"","title":"Help"},{"location":"guides/prom-query/#prometheus-http-api-documentation","text":"View the Prometheus HTTP API Documentation for additional information on sending requests to the Prometheus API. Some helpful takeaways: Send a GET request to the /metadata endpoint to list all available metrics. You can limit the number of results using the ?limit=<number> query string parameter Use the ?metric=<string> qsp to get information about a specific metric. Use /labels to get a list of available labels. Use /label/<label_value>/values to get possible values for a given label_value Use /series to get a list of time series that match a given label set. View Prometheus API docs for more info.","title":"Prometheus HTTP API Documentation"},{"location":"guides/prom-query/#promql","text":"Check out the QUERYING PROMETHEUS documentation for the basics of forming PromQL queries. I also felt this video was useful for learning PromQL basics.","title":"PromQL"},{"location":"guides/prom-query/#grafana-and-additional-queries","text":"We have a number of panels in our Grafana dashboards showcasing a number of queries. Here some examples of on our dashboard, along with the associated PromQL queries: Total Requests per second sum(rate(kong_http_status[1m])) Kong Proxy Latency per Service histogram_quantile(0.90, sum(rate(kong_latency_bucket{type=\"kong\", service =~ \". \",route=~\". \",1m])) by (service,le)) Upstream Time per Service histogram_quantile(0.90, sum(rate(kong_latency_bucket{type=\"upstream\", service =~ \". \",route=~\". \",}[1m])) by (service,le)) Total Requests (5m) by Consumer sum(increase(konglog_service_consumer_counter{service=~\".*\",consumer!=\"\"}[5m])) by (consumer, service, status) != 0 400 and 500 Errors sum(increase(konglog_service_agent_counter{status!='200',status!='201',status!='204',status!='206',status!='301',status!='302',status!='304',service!=''}[5m])) by (service, status) != 0","title":"Grafana and Additional Queries"},{"location":"guides/tutorial-idp-client-cred-flow/","text":"Protecting an API with OAuth2 Client Credential Flow \u00b6 Steps for protecting and calling an API using the OAuth2 Client Credential Grant. Configuring an API on the Kong Gateway Granting Access to the IdP Client Requesting Access Provider Approving Access Client Retrieving the Access Token Client Calling an API Gateway Proxying to Upstream 1. Configuring an API on the Kong Gateway \u00b6 The API Provider User Journey document provides the steps to enable a new API on the Kong Gateway. It will walk you through the creation of a new Namespace, and a Service Account that can be used to configure the Kong Gateway and the Authorization Profile described in step 2. Once the API is working on the Gateway, you can then define a Product, which can be made available on the API Services Portal Directory. 2. Granting Access to the IdP \u00b6 Custom IdP \u00b6 a) Prerequisites \u00b6 Before the Portal can be configured, a new set of credentials must be created on the IdP. For this tutorial, we will include the steps when Keycloak is the IdP. Create a new Client on the IdP Create a new client with Access Type confidential . All flows except Service Accounts should be turned off. Make a note of the Client ID and Client Secret , they will be used when the Portal Authorization Profile is created. The Full Scope Allowed can be turned off and the realm-management client roles for manage-clients and manage-users should be added. Add the manage-clients and manage-users client roles to the Service Account Roles . b) Setup the Authorization Profile \u00b6 A credential with CredentialIssuer.Admin is required to update Authorization Profiles ( CredentialIssuer ). Authorization Profiles can be setup either via the Portal or by using a Service Account with the Portal Directory API. Update the below CredentialIssuer to include the environment details and the Scopes and Roles setup for authorization. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 kind : CredentialIssuer name : Resource Server Example namespace : $NS description : Authorization Profile for protecting Ministry of XYZ flow : client-credentials mode : auto authPlugin : jwt-keycloak clientAuthenticator : client-secret clientRoles : [] clientMappers : - name : audience defaultValue : \"\" availableScopes : [ Function1/read , Function2/* , Function3/write , Function3/read ] owner : <your-username> environmentDetails : - environment : prod issuerUrl : https://auth-issuer clientId : testapp-client clientRegistration : managed clientSecret : \"\" c) Link the Authorization Profile to the Product \u00b6 Before making the API available on the Directory, the API should be configured with a plugin for protecting access. To do this, an API Provider can edit the Product details to select Oauth2 Client Credential Flow and the newly created Authorization Profile. d) Update your Gateway Configuration with the Plugin \u00b6 Update your Gateway Configuration to include the jwt-keycloak plugin. HINT: When you configure the Product Environment, a Plugin Template will be displayed - this can be a starting point for protecting your API on the Gateway. Finally, from the Portal, enable the Environment to make it available on the API Directory. e) Optional Configuration \u00b6 Scopes If you have Client Scopes that you want to have controlled by the Portal, add them to the Realm's Client Scopes and Default Client Scopes on the IdP. Update the CredentialIssuer record above to match the availableScopes with the ones added on the IdP. Roles If you have Roles that you want to have controlled by the Portal, add them to the Client's Roles . Update the CredentialIssuer record above to match the clientRoles with the ones added on the IdP. Client Mappers The audience is an optional mapper that can be added to a Client. The IdP needs to have a policy that allows Audience to be added as a Protocol Mapper to the client. In Keycloak, this is updated under the Realm's Client Registration -> Client Registration Policies . Edit the Authenticated Access Policies -> Allowed Protocol Mapper Types to include the oidc-audience-mapper . UMA2 Authorization Resources If you want to use the Authorization services, then set Authorization Enabled to ON for the Client on the IdP. You will also want to set the Decision Strategy to Affirmative . Update the following CredentialIssuer attributes: 1 2 3 resourceType: \"\" resourceAccessScope: \"\" resourceScopes: [] resourceType : The Resource Type of the resources that will be managed (required) resourceScopes : A list of the Authorization Scopes managed for the particular Resources (required) resourceAccessScope : Used in the case where the Resource Server owns all the resources, a user must have the resourceAccessScope assigned in order to be allowed to manage the access. If it is not set, then the user has to be the resource owner in order to manage access. resourceAccessScope - The API Services Portal has not completed the implementation for the scenario where the User is the Resource Owner ( resourceAccessScope is left blank). It uses the Token Exchange capability but it's an optional service available on Keycloak and has numerous caveats around it. Please contact the APS team if interested to know more. Shared IdP \u00b6 Shared IdP is a new feature that allows you, as an API Provider, to leverage the SSO Gold-tier Keycloak cluster for managing Client Credentials, without having to deal with it directly. The APS team have a custom realm on this Keycloak called apigw which the API Services Portal administers. Token Issuers: https://dev.loginproxy.gov.bc.ca/auth/realms/apigw https://test.loginproxy.gov.bc.ca/auth/realms/apigw https://loginproxy.gov.bc.ca/auth/realms/apigw To use it, perform the following steps: a) Setup the Authorization Profile \u00b6 A credential with CredentialIssuer.Admin is required to update Authorization Profiles ( CredentialIssuer ). Authorization Profiles can be setup either via the Portal or by using a Service Account with the Portal Directory API. Update the below CredentialIssuer with the name and description that makes sense to you, and include the desired Roles setup for authorization. 1 2 3 4 5 6 7 8 9 10 kind : CredentialIssuer name : Resource Server Example namespace : $NS description : Authorization Profile for protecting Ministry of XYZ flow : client-credentials mode : auto authPlugin : jwt-keycloak clientAuthenticator : client-secret clientRoles : [] inheritFrom : Gold Shared IdP b) Link the Authorization Profile to the Product \u00b6 Before making the API available on the Directory, the API should be configured with a plugin for protecting access. To do this, an API Provider can edit the Product details to select Oauth2 Client Credential Flow and the newly created Authorization Profile. c) Update your Gateway Configuration with the Plugin \u00b6 Update your Gateway Configuration to include the jwt-keycloak plugin. HINT: When you configure the Product Environment, a Plugin Template will be displayed - this can be a starting point for protecting your API on the Gateway. Finally, from the Portal, enable the Environment to make it available on the API Directory. d) Optional Configuration \u00b6 Roles If you have Roles that you want to have controlled by the Portal, add them to the Client's Roles . Update the CredentialIssuer record above with the clientRoles you want to manage. 3. Client Requesting Access \u00b6 Request access to the API via the API Services Portal and generate the credentials to be used below. The Portal will use the credentials setup in the Authorization Profile, to create a disabled Client on the IdP (with any applicable Client Mappers) and return the credentials to the Requesting user. 4. Provider Approving Access \u00b6 An Access Manager reviews the access request, sets any additional controls, grants the relevant permissions (i.e./ scopes and roles), and approves. The Portal will enable the Client and apply the permissions on the IdP. The Portal sends a notification to the Requester letting them know that API Access has been approved (or rejected). 5. Client Retrieving the Access Token \u00b6 Using the Credentials generated in step 3, the Requester calls the Token endpoint to get a new JWT token. 1 2 3 4 5 6 7 8 9 export CID=\"\" export CSC=\"\" export URL=\"\" curl $URL \\ -X POST -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d client_id=$CID -d client_secret=$CSC \\ -d grant_type=client_credentials \\ -d scopes=openid 6. Client Calling the API \u00b6 Extract the Access Token from the response, set it in a TOK environment variable, and call the API. 1 2 curl -v -H \"Authorization: Bearer $TOK\" \\ https://myservice.api.gov.bc.ca/v1/status The API Gateway's jwt-keycloak plugin will use the IdP's public keys to validate the token and depending on the plugin configuration, validate the scopes or roles. 7. Gateway Proxying to Upstream \u00b6 A technical, but important step in the integration is the Gateway proxying the request to the Upstream Service API and deciding on the different options for securing that interaction. Options: Network Policy : If the Services are co-located on the same Cluster as the Gateway's Data Plane, then native network policies can be used to protect the channel between the Gateway and the Upstream Service. This approach is used for Services running on the Openshift Silver cluster. Kong Upstream JWT : This plugin adds a signed JWT to the request headers so that the Upstream Service can verify that the request came specifically from the Gateway. Client Certificates : Client certificates (mTLS) provides a way for the Upstream Service to provide a secure channel from the Gateway and to verify that the request came specifically from the Gateway. Firewall IP Restrictions : This provides a low-level of protection by limiting the IPs to the ones of the Gateway Data Planes. Because the Data Planes are typically on shared infrastructure, this would still allow traffic from other tenants. This might be acceptable based on the type of data delivered by or to the Upstream Service. Variations \u00b6 Signed JWT \u00b6 The Authorization Profile clientAuthenticator was set to client-secret in this tutorial, but there is an alternate setup that can be used: client-jwt-jwks-url (Signed JWT with JWKS URL or Certificate) In this scenario, when a Client is requesting access, they will be required to enter details about the client assertion certificates. The details can either be a public JWKS URL that holds the public key information for a key pair, or providing just the public key information. The information will be used in step 5 when retrieving the Bearer Token. For further details, you can see the specific examples Signed JWT w/ Hosted JWKS or Signed JWT w/ Certificate .","title":"Protecting an API with OAuth2 Client Credential Flow"},{"location":"guides/tutorial-idp-client-cred-flow/#protecting-an-api-with-oauth2-client-credential-flow","text":"Steps for protecting and calling an API using the OAuth2 Client Credential Grant. Configuring an API on the Kong Gateway Granting Access to the IdP Client Requesting Access Provider Approving Access Client Retrieving the Access Token Client Calling an API Gateway Proxying to Upstream","title":"Protecting an API with OAuth2 Client Credential Flow"},{"location":"guides/tutorial-idp-client-cred-flow/#1-configuring-an-api-on-the-kong-gateway","text":"The API Provider User Journey document provides the steps to enable a new API on the Kong Gateway. It will walk you through the creation of a new Namespace, and a Service Account that can be used to configure the Kong Gateway and the Authorization Profile described in step 2. Once the API is working on the Gateway, you can then define a Product, which can be made available on the API Services Portal Directory.","title":"1. Configuring an API on the Kong Gateway"},{"location":"guides/tutorial-idp-client-cred-flow/#2-granting-access-to-the-idp","text":"","title":"2. Granting Access to the IdP"},{"location":"guides/tutorial-idp-client-cred-flow/#custom-idp","text":"","title":"Custom IdP"},{"location":"guides/tutorial-idp-client-cred-flow/#a-prerequisites","text":"Before the Portal can be configured, a new set of credentials must be created on the IdP. For this tutorial, we will include the steps when Keycloak is the IdP. Create a new Client on the IdP Create a new client with Access Type confidential . All flows except Service Accounts should be turned off. Make a note of the Client ID and Client Secret , they will be used when the Portal Authorization Profile is created. The Full Scope Allowed can be turned off and the realm-management client roles for manage-clients and manage-users should be added. Add the manage-clients and manage-users client roles to the Service Account Roles .","title":"a) Prerequisites"},{"location":"guides/tutorial-idp-client-cred-flow/#b-setup-the-authorization-profile","text":"A credential with CredentialIssuer.Admin is required to update Authorization Profiles ( CredentialIssuer ). Authorization Profiles can be setup either via the Portal or by using a Service Account with the Portal Directory API. Update the below CredentialIssuer to include the environment details and the Scopes and Roles setup for authorization. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 kind : CredentialIssuer name : Resource Server Example namespace : $NS description : Authorization Profile for protecting Ministry of XYZ flow : client-credentials mode : auto authPlugin : jwt-keycloak clientAuthenticator : client-secret clientRoles : [] clientMappers : - name : audience defaultValue : \"\" availableScopes : [ Function1/read , Function2/* , Function3/write , Function3/read ] owner : <your-username> environmentDetails : - environment : prod issuerUrl : https://auth-issuer clientId : testapp-client clientRegistration : managed clientSecret : \"\"","title":"b) Setup the Authorization Profile"},{"location":"guides/tutorial-idp-client-cred-flow/#c-link-the-authorization-profile-to-the-product","text":"Before making the API available on the Directory, the API should be configured with a plugin for protecting access. To do this, an API Provider can edit the Product details to select Oauth2 Client Credential Flow and the newly created Authorization Profile.","title":"c) Link the Authorization Profile to the Product"},{"location":"guides/tutorial-idp-client-cred-flow/#d-update-your-gateway-configuration-with-the-plugin","text":"Update your Gateway Configuration to include the jwt-keycloak plugin. HINT: When you configure the Product Environment, a Plugin Template will be displayed - this can be a starting point for protecting your API on the Gateway. Finally, from the Portal, enable the Environment to make it available on the API Directory.","title":"d) Update your Gateway Configuration with the Plugin"},{"location":"guides/tutorial-idp-client-cred-flow/#e-optional-configuration","text":"Scopes If you have Client Scopes that you want to have controlled by the Portal, add them to the Realm's Client Scopes and Default Client Scopes on the IdP. Update the CredentialIssuer record above to match the availableScopes with the ones added on the IdP. Roles If you have Roles that you want to have controlled by the Portal, add them to the Client's Roles . Update the CredentialIssuer record above to match the clientRoles with the ones added on the IdP. Client Mappers The audience is an optional mapper that can be added to a Client. The IdP needs to have a policy that allows Audience to be added as a Protocol Mapper to the client. In Keycloak, this is updated under the Realm's Client Registration -> Client Registration Policies . Edit the Authenticated Access Policies -> Allowed Protocol Mapper Types to include the oidc-audience-mapper . UMA2 Authorization Resources If you want to use the Authorization services, then set Authorization Enabled to ON for the Client on the IdP. You will also want to set the Decision Strategy to Affirmative . Update the following CredentialIssuer attributes: 1 2 3 resourceType: \"\" resourceAccessScope: \"\" resourceScopes: [] resourceType : The Resource Type of the resources that will be managed (required) resourceScopes : A list of the Authorization Scopes managed for the particular Resources (required) resourceAccessScope : Used in the case where the Resource Server owns all the resources, a user must have the resourceAccessScope assigned in order to be allowed to manage the access. If it is not set, then the user has to be the resource owner in order to manage access. resourceAccessScope - The API Services Portal has not completed the implementation for the scenario where the User is the Resource Owner ( resourceAccessScope is left blank). It uses the Token Exchange capability but it's an optional service available on Keycloak and has numerous caveats around it. Please contact the APS team if interested to know more.","title":"e) Optional Configuration"},{"location":"guides/tutorial-idp-client-cred-flow/#shared-idp","text":"Shared IdP is a new feature that allows you, as an API Provider, to leverage the SSO Gold-tier Keycloak cluster for managing Client Credentials, without having to deal with it directly. The APS team have a custom realm on this Keycloak called apigw which the API Services Portal administers. Token Issuers: https://dev.loginproxy.gov.bc.ca/auth/realms/apigw https://test.loginproxy.gov.bc.ca/auth/realms/apigw https://loginproxy.gov.bc.ca/auth/realms/apigw To use it, perform the following steps:","title":"Shared IdP"},{"location":"guides/tutorial-idp-client-cred-flow/#a-setup-the-authorization-profile","text":"A credential with CredentialIssuer.Admin is required to update Authorization Profiles ( CredentialIssuer ). Authorization Profiles can be setup either via the Portal or by using a Service Account with the Portal Directory API. Update the below CredentialIssuer with the name and description that makes sense to you, and include the desired Roles setup for authorization. 1 2 3 4 5 6 7 8 9 10 kind : CredentialIssuer name : Resource Server Example namespace : $NS description : Authorization Profile for protecting Ministry of XYZ flow : client-credentials mode : auto authPlugin : jwt-keycloak clientAuthenticator : client-secret clientRoles : [] inheritFrom : Gold Shared IdP","title":"a) Setup the Authorization Profile"},{"location":"guides/tutorial-idp-client-cred-flow/#b-link-the-authorization-profile-to-the-product","text":"Before making the API available on the Directory, the API should be configured with a plugin for protecting access. To do this, an API Provider can edit the Product details to select Oauth2 Client Credential Flow and the newly created Authorization Profile.","title":"b) Link the Authorization Profile to the Product"},{"location":"guides/tutorial-idp-client-cred-flow/#c-update-your-gateway-configuration-with-the-plugin","text":"Update your Gateway Configuration to include the jwt-keycloak plugin. HINT: When you configure the Product Environment, a Plugin Template will be displayed - this can be a starting point for protecting your API on the Gateway. Finally, from the Portal, enable the Environment to make it available on the API Directory.","title":"c) Update your Gateway Configuration with the Plugin"},{"location":"guides/tutorial-idp-client-cred-flow/#d-optional-configuration","text":"Roles If you have Roles that you want to have controlled by the Portal, add them to the Client's Roles . Update the CredentialIssuer record above with the clientRoles you want to manage.","title":"d) Optional Configuration"},{"location":"guides/tutorial-idp-client-cred-flow/#3-client-requesting-access","text":"Request access to the API via the API Services Portal and generate the credentials to be used below. The Portal will use the credentials setup in the Authorization Profile, to create a disabled Client on the IdP (with any applicable Client Mappers) and return the credentials to the Requesting user.","title":"3. Client Requesting Access"},{"location":"guides/tutorial-idp-client-cred-flow/#4-provider-approving-access","text":"An Access Manager reviews the access request, sets any additional controls, grants the relevant permissions (i.e./ scopes and roles), and approves. The Portal will enable the Client and apply the permissions on the IdP. The Portal sends a notification to the Requester letting them know that API Access has been approved (or rejected).","title":"4. Provider Approving Access"},{"location":"guides/tutorial-idp-client-cred-flow/#5-client-retrieving-the-access-token","text":"Using the Credentials generated in step 3, the Requester calls the Token endpoint to get a new JWT token. 1 2 3 4 5 6 7 8 9 export CID=\"\" export CSC=\"\" export URL=\"\" curl $URL \\ -X POST -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d client_id=$CID -d client_secret=$CSC \\ -d grant_type=client_credentials \\ -d scopes=openid","title":"5. Client Retrieving the Access Token"},{"location":"guides/tutorial-idp-client-cred-flow/#6-client-calling-the-api","text":"Extract the Access Token from the response, set it in a TOK environment variable, and call the API. 1 2 curl -v -H \"Authorization: Bearer $TOK\" \\ https://myservice.api.gov.bc.ca/v1/status The API Gateway's jwt-keycloak plugin will use the IdP's public keys to validate the token and depending on the plugin configuration, validate the scopes or roles.","title":"6. Client Calling the API"},{"location":"guides/tutorial-idp-client-cred-flow/#7-gateway-proxying-to-upstream","text":"A technical, but important step in the integration is the Gateway proxying the request to the Upstream Service API and deciding on the different options for securing that interaction. Options: Network Policy : If the Services are co-located on the same Cluster as the Gateway's Data Plane, then native network policies can be used to protect the channel between the Gateway and the Upstream Service. This approach is used for Services running on the Openshift Silver cluster. Kong Upstream JWT : This plugin adds a signed JWT to the request headers so that the Upstream Service can verify that the request came specifically from the Gateway. Client Certificates : Client certificates (mTLS) provides a way for the Upstream Service to provide a secure channel from the Gateway and to verify that the request came specifically from the Gateway. Firewall IP Restrictions : This provides a low-level of protection by limiting the IPs to the ones of the Gateway Data Planes. Because the Data Planes are typically on shared infrastructure, this would still allow traffic from other tenants. This might be acceptable based on the type of data delivered by or to the Upstream Service.","title":"7. Gateway Proxying to Upstream"},{"location":"guides/tutorial-idp-client-cred-flow/#variations","text":"","title":"Variations"},{"location":"guides/tutorial-idp-client-cred-flow/#signed-jwt","text":"The Authorization Profile clientAuthenticator was set to client-secret in this tutorial, but there is an alternate setup that can be used: client-jwt-jwks-url (Signed JWT with JWKS URL or Certificate) In this scenario, when a Client is requesting access, they will be required to enter details about the client assertion certificates. The details can either be a public JWKS URL that holds the public key information for a key pair, or providing just the public key information. The information will be used in step 5 when retrieving the Bearer Token. For further details, you can see the specific examples Signed JWT w/ Hosted JWKS or Signed JWT w/ Certificate .","title":"Signed JWT"},{"location":"portal-use-cases/access/","text":"4. Request/Approve Access \u00b6 Request Access \u00b6 Approve Access \u00b6","title":"4. Request/Approve Access"},{"location":"portal-use-cases/access/#4-requestapprove-access","text":"","title":"4. Request/Approve Access"},{"location":"portal-use-cases/access/#request-access","text":"","title":"Request Access"},{"location":"portal-use-cases/access/#approve-access","text":"","title":"Approve Access"},{"location":"portal-use-cases/consumer-maintenance/","text":"5. Consumer Maintenance \u00b6 Maintain Consumer Roles \u00b6 Maintain Consumer Scopes \u00b6","title":"5. Consumer Maintenance"},{"location":"portal-use-cases/consumer-maintenance/#5-consumer-maintenance","text":"","title":"5. Consumer Maintenance"},{"location":"portal-use-cases/consumer-maintenance/#maintain-consumer-roles","text":"","title":"Maintain Consumer Roles"},{"location":"portal-use-cases/consumer-maintenance/#maintain-consumer-scopes","text":"","title":"Maintain Consumer Scopes"},{"location":"portal-use-cases/create-service-account/","text":"2. Create Service Account \u00b6","title":"2. Create Service Account"},{"location":"portal-use-cases/create-service-account/#2-create-service-account","text":"","title":"2. Create Service Account"},{"location":"portal-use-cases/login/","text":"1. Login \u00b6","title":"1. Login"},{"location":"portal-use-cases/login/#1-login","text":"","title":"1. Login"},{"location":"portal-use-cases/switch-namespace/","text":"3. Switch Namespace \u00b6","title":"3. Switch Namespace"},{"location":"portal-use-cases/switch-namespace/#3-switch-namespace","text":"","title":"3. Switch Namespace"},{"location":"portal-use-cases/websequencediagrams/","text":"Web Sequence Diagrams \u00b6 API Owner Login \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 title API Owner Login actor API Owner actor APS Portal actor APS IdP API Owner -> APS Portal : Browse To APS Portal -> oidc.gov.bc.ca [xtmke7ky] : Login (keycloak-oidc) API Owner -> oidc.gov.bc.ca [xtmke7ky] : Select IDIR oidc.gov.bc.ca [xtmke7ky] -> oidc.gov.bc.ca [idir] : Broker oidc.gov.bc.ca [idir] -> sfs7.gov.bc.ca : Broker sfs7.gov.bc.ca -> logon7.gov.bc.ca : Broker API Owner -> logon7.gov.bc.ca : Submit IDIR Credentials logon7.gov.bc.ca -> sfs7.gov.bc.ca : Callback sfs7.gov.bc.ca -> oidc.gov.bc.ca [idir] : Callback oidc.gov.bc.ca [idir] -> oidc.gov.bc.ca [xtmke7ky] : Callback oidc.gov.bc.ca [xtmke7ky] -> APS Portal : Callback Switch Namespace \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 title Switch Namespace actor API Owner actor APS Portal actor APS IdP API Owner -> APS Portal : Browse To API Owner -> APS Portal : Switch Namespace APS Portal -> APS IdP : getUma2FromIssuer (GET .well-known) APS Portal -> APS IdP : getRequestingPartyToken (POST uma2.token_endpoint) APS Portal -> APS Portal : Update Session Permissions APS Portal -> API Owner : Ack Create Service Account \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 title Create Service Account actor APS Portal actor ServiceAccount actor ClientCredentials actor KeystoneJS actor ClientCredentials actor Feeder API actor IdP actor Kong APS Portal -> ServiceAccount : CreateServiceAccount ServiceAccount -> KeystoneJS : lookupProductEnvironmentServicesBySlug ServiceAccount -> ClientCredentials : registerClient ClientCredentials -> KeystoneJS : lookupCredentialIssuerById ClientCredentials -> IdP : getOpenidFromIssuer (GET .well-known) ClientCredentials -> IdP : getKeycloakSession (openid.token_endpoint) ClientCredentials -> IdP : clientRegistration (openid.registration_endpoint) ServiceAccount -> Kong : create Kong Consumer ServiceAccount -> KeystoneJS : AddClientConsumer KeystoneJS -> Feeder API : Force Sync Kong Consumer Feeder API -> Kong : Query Consumer Feeder API -> KeystoneJS : Update Kong Consumer ServiceAccount -> KeystoneJS : addServiceAccess ServiceAccount -> KeystoneJS : lookupCredentialIssuerById ServiceAccount -> IdP : getOpenidFromIssuer ServiceAccount -> IdP : getKeycloakSession (openid.token_endpoint)) ServiceAccount -> IdP : updateClientRegistration (enable=true) (openid.registration_endpoint) ServiceAccount -> IdP : syncAndApply (Scopes) ServiceAccount -> IdP : getUma2FromIssuer ServiceAccount -> IdP : getKeycloakSession (openid.token_endpoint) ServiceAccount -> IdP : createUmaPolicy (uma2.policy_endpoint) ServiceAccount -> KeystoneJS : markActiveTheServiceAccess Request Access \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 title Request Access actor Developer actor APS Portal actor AccessRequest.Apply actor GenerateCredential actor ClientCredentials actor KeystoneJS actor IdP Developer -> APS Portal : Login (Redirect) Developer -> oidc.gov.bc.ca : Login (BCeID, IDIR, Github) oidc.gov.bc.ca -> APS Portal : Callback Developer -> APS Portal : Request Access APS Portal -> KeystoneJS : Create Access Request KeystoneJS -> APS Portal : afterChange Hook Workflow Apply APS Portal -> AccessRequest.Apply : Generate Creds AccessRequest.Apply -> KeystoneJS : lookupEnvironmentAndApplicationByAccessRequest AccessRequest.Apply -> GenerateCredential : lookupProductEnvironmentServices AccessRequest.Apply -> GenerateCredential : lookupApplication GenerateCredential -> ClientCredentials : registerClient ClientCredentials -> KeystoneJS : lookupCredentialIssuerById ClientCredentials -> IdP : getOpenidFromIssuer (GET .well-known) ClientCredentials -> IdP : getKeycloakSession (openid.token_endpoint) ClientCredentials -> IdP : clientRegistration (openid.registration_endpoint) GenerateCredential -> Kong : create Kong Consumer GenerateCredential -> KeystoneJS : AddClientConsumer KeystoneJS -> Feeder API : Force Sync Kong Consumer Feeder API -> Kong : Query Consumer Feeder API -> KeystoneJS : Update Kong Consumer GenerateCredential -> KeystoneJS : addServiceAccess GenerateCredential -> KeystoneJS : linkServiceAccessToRequest GenerateCredential -> APS Portal : NewCredential AccessRequest.Apply -> KeystoneJS : Record Activity AccessRequest.Apply -> APS Portal : NewCredential APS Portal -> Developer : NewCredential Approve Access \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 title Approve Access actor Access Manager actor APS Portal actor AccessRequest.Apply actor ClientCredentials actor KeystoneJS actor ClientCredentials actor Feeder API actor IdP actor Email actor Kong Access Manager -> APS Portal : Approve Access Request APS Portal -> AccessRequest.Apply : Approve AccessRequest.Apply -> KeystoneJS : lookupEnvironmentAndApplicationByAccessRequest AccessRequest.Apply -> KeystoneJS : lookupCredentialIssuerById AccessRequest.Apply -> IdP : getOpenidFromIssuer AccessRequest.Apply -> IdP : getKeycloakSession (openid.token_endpoint)) AccessRequest.Apply -> IdP : updateClientRegistration (enable=true) (openid.registration_endpoint) AccessRequest.Apply -> IdP : syncAndApply (Scopes) AccessRequest.Apply -> KeystoneJS : markActiveTheServiceAccess AccessRequest.Apply -> APS Portal : Ack APS Portal -> Email : Notify Requester APS Portal -> Access Manager : Ack Maintain Consumer Scopes and Roles \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 title Maintain Consumer Roles actor Access Manager actor APS Portal actor ConsumerScopesAndRoles actor List.Common actor KeystoneJS actor IdP Access Manager -> APS Portal : View Consumer Detail Access Manager -> APS Portal : Change Roles APS Portal -> ConsumerScopesAndRoles : updateConsumerRoleAssignment ConsumerScopesAndRoles -> List.Common : getEnvironmentContext List.Common -> KeystoneJS : lookupEnvironmentAndIssuerUsingWhereClause List.Common -> IdP : getOpenidFromIssuer (.well-known) List.Common -> IdP : getUma2FromIssuer (.well-known) List.Common -> List.Common : getSubjectToken ConsumerScopesAndRoles -> IdP : login ConsumerScopesAndRoles -> IdP : findByClientId (Issuer Client ID) ConsumerScopesAndRoles -> IdP : list(Client)Roles ConsumerScopesAndRoles -> IdP : findByClientId (Consumer Username) ConsumerScopesAndRoles -> IdP : lookupServiceAccountUserId ConsumerScopesAndRoles -> IdP : syncUserClientRoles ConsumerScopesAndRoles -> APS Portal : Ack APS Portal -> Access Manager : Ack 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 title Maintain Consumer Scopes actor Access Manager actor APS Portal actor ConsumerScopesAndRoles actor List.Common actor KeystoneJS actor IdP Access Manager -> APS Portal : View Consumer Detail Access Manager -> APS Portal : Change Scopes APS Portal -> ConsumerScopesAndRoles : updateConsumerScopeAssignment ConsumerScopesAndRoles -> List.Common : getEnvironmentContext List.Common -> KeystoneJS : lookupEnvironmentAndIssuerUsingWhereClause List.Common -> IdP : getOpenidFromIssuer (.well-known) List.Common -> IdP : getUma2FromIssuer (.well-known) List.Common -> List.Common : getSubjectToken ConsumerScopesAndRoles -> IdP : login ConsumerScopesAndRoles -> IdP : findByClientId (Issuer Client ID) ConsumerScopesAndRoles -> IdP : listDefaultClientScopes ConsumerScopesAndRoles -> IdP : syncClientScopes (openid.registration_endpoint) ConsumerScopesAndRoles -> APS Portal : Ack APS Portal -> Access Manager : Ack","title":"Web Sequence Diagrams"},{"location":"portal-use-cases/websequencediagrams/#web-sequence-diagrams","text":"","title":"Web Sequence Diagrams"},{"location":"portal-use-cases/websequencediagrams/#api-owner-login","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 title API Owner Login actor API Owner actor APS Portal actor APS IdP API Owner -> APS Portal : Browse To APS Portal -> oidc.gov.bc.ca [xtmke7ky] : Login (keycloak-oidc) API Owner -> oidc.gov.bc.ca [xtmke7ky] : Select IDIR oidc.gov.bc.ca [xtmke7ky] -> oidc.gov.bc.ca [idir] : Broker oidc.gov.bc.ca [idir] -> sfs7.gov.bc.ca : Broker sfs7.gov.bc.ca -> logon7.gov.bc.ca : Broker API Owner -> logon7.gov.bc.ca : Submit IDIR Credentials logon7.gov.bc.ca -> sfs7.gov.bc.ca : Callback sfs7.gov.bc.ca -> oidc.gov.bc.ca [idir] : Callback oidc.gov.bc.ca [idir] -> oidc.gov.bc.ca [xtmke7ky] : Callback oidc.gov.bc.ca [xtmke7ky] -> APS Portal : Callback","title":"API Owner Login"},{"location":"portal-use-cases/websequencediagrams/#switch-namespace","text":"1 2 3 4 5 6 7 8 9 10 11 12 title Switch Namespace actor API Owner actor APS Portal actor APS IdP API Owner -> APS Portal : Browse To API Owner -> APS Portal : Switch Namespace APS Portal -> APS IdP : getUma2FromIssuer (GET .well-known) APS Portal -> APS IdP : getRequestingPartyToken (POST uma2.token_endpoint) APS Portal -> APS Portal : Update Session Permissions APS Portal -> API Owner : Ack","title":"Switch Namespace"},{"location":"portal-use-cases/websequencediagrams/#create-service-account","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 title Create Service Account actor APS Portal actor ServiceAccount actor ClientCredentials actor KeystoneJS actor ClientCredentials actor Feeder API actor IdP actor Kong APS Portal -> ServiceAccount : CreateServiceAccount ServiceAccount -> KeystoneJS : lookupProductEnvironmentServicesBySlug ServiceAccount -> ClientCredentials : registerClient ClientCredentials -> KeystoneJS : lookupCredentialIssuerById ClientCredentials -> IdP : getOpenidFromIssuer (GET .well-known) ClientCredentials -> IdP : getKeycloakSession (openid.token_endpoint) ClientCredentials -> IdP : clientRegistration (openid.registration_endpoint) ServiceAccount -> Kong : create Kong Consumer ServiceAccount -> KeystoneJS : AddClientConsumer KeystoneJS -> Feeder API : Force Sync Kong Consumer Feeder API -> Kong : Query Consumer Feeder API -> KeystoneJS : Update Kong Consumer ServiceAccount -> KeystoneJS : addServiceAccess ServiceAccount -> KeystoneJS : lookupCredentialIssuerById ServiceAccount -> IdP : getOpenidFromIssuer ServiceAccount -> IdP : getKeycloakSession (openid.token_endpoint)) ServiceAccount -> IdP : updateClientRegistration (enable=true) (openid.registration_endpoint) ServiceAccount -> IdP : syncAndApply (Scopes) ServiceAccount -> IdP : getUma2FromIssuer ServiceAccount -> IdP : getKeycloakSession (openid.token_endpoint) ServiceAccount -> IdP : createUmaPolicy (uma2.policy_endpoint) ServiceAccount -> KeystoneJS : markActiveTheServiceAccess","title":"Create Service Account"},{"location":"portal-use-cases/websequencediagrams/#request-access","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 title Request Access actor Developer actor APS Portal actor AccessRequest.Apply actor GenerateCredential actor ClientCredentials actor KeystoneJS actor IdP Developer -> APS Portal : Login (Redirect) Developer -> oidc.gov.bc.ca : Login (BCeID, IDIR, Github) oidc.gov.bc.ca -> APS Portal : Callback Developer -> APS Portal : Request Access APS Portal -> KeystoneJS : Create Access Request KeystoneJS -> APS Portal : afterChange Hook Workflow Apply APS Portal -> AccessRequest.Apply : Generate Creds AccessRequest.Apply -> KeystoneJS : lookupEnvironmentAndApplicationByAccessRequest AccessRequest.Apply -> GenerateCredential : lookupProductEnvironmentServices AccessRequest.Apply -> GenerateCredential : lookupApplication GenerateCredential -> ClientCredentials : registerClient ClientCredentials -> KeystoneJS : lookupCredentialIssuerById ClientCredentials -> IdP : getOpenidFromIssuer (GET .well-known) ClientCredentials -> IdP : getKeycloakSession (openid.token_endpoint) ClientCredentials -> IdP : clientRegistration (openid.registration_endpoint) GenerateCredential -> Kong : create Kong Consumer GenerateCredential -> KeystoneJS : AddClientConsumer KeystoneJS -> Feeder API : Force Sync Kong Consumer Feeder API -> Kong : Query Consumer Feeder API -> KeystoneJS : Update Kong Consumer GenerateCredential -> KeystoneJS : addServiceAccess GenerateCredential -> KeystoneJS : linkServiceAccessToRequest GenerateCredential -> APS Portal : NewCredential AccessRequest.Apply -> KeystoneJS : Record Activity AccessRequest.Apply -> APS Portal : NewCredential APS Portal -> Developer : NewCredential","title":"Request Access"},{"location":"portal-use-cases/websequencediagrams/#approve-access","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 title Approve Access actor Access Manager actor APS Portal actor AccessRequest.Apply actor ClientCredentials actor KeystoneJS actor ClientCredentials actor Feeder API actor IdP actor Email actor Kong Access Manager -> APS Portal : Approve Access Request APS Portal -> AccessRequest.Apply : Approve AccessRequest.Apply -> KeystoneJS : lookupEnvironmentAndApplicationByAccessRequest AccessRequest.Apply -> KeystoneJS : lookupCredentialIssuerById AccessRequest.Apply -> IdP : getOpenidFromIssuer AccessRequest.Apply -> IdP : getKeycloakSession (openid.token_endpoint)) AccessRequest.Apply -> IdP : updateClientRegistration (enable=true) (openid.registration_endpoint) AccessRequest.Apply -> IdP : syncAndApply (Scopes) AccessRequest.Apply -> KeystoneJS : markActiveTheServiceAccess AccessRequest.Apply -> APS Portal : Ack APS Portal -> Email : Notify Requester APS Portal -> Access Manager : Ack","title":"Approve Access"},{"location":"portal-use-cases/websequencediagrams/#maintain-consumer-scopes-and-roles","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 title Maintain Consumer Roles actor Access Manager actor APS Portal actor ConsumerScopesAndRoles actor List.Common actor KeystoneJS actor IdP Access Manager -> APS Portal : View Consumer Detail Access Manager -> APS Portal : Change Roles APS Portal -> ConsumerScopesAndRoles : updateConsumerRoleAssignment ConsumerScopesAndRoles -> List.Common : getEnvironmentContext List.Common -> KeystoneJS : lookupEnvironmentAndIssuerUsingWhereClause List.Common -> IdP : getOpenidFromIssuer (.well-known) List.Common -> IdP : getUma2FromIssuer (.well-known) List.Common -> List.Common : getSubjectToken ConsumerScopesAndRoles -> IdP : login ConsumerScopesAndRoles -> IdP : findByClientId (Issuer Client ID) ConsumerScopesAndRoles -> IdP : list(Client)Roles ConsumerScopesAndRoles -> IdP : findByClientId (Consumer Username) ConsumerScopesAndRoles -> IdP : lookupServiceAccountUserId ConsumerScopesAndRoles -> IdP : syncUserClientRoles ConsumerScopesAndRoles -> APS Portal : Ack APS Portal -> Access Manager : Ack 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 title Maintain Consumer Scopes actor Access Manager actor APS Portal actor ConsumerScopesAndRoles actor List.Common actor KeystoneJS actor IdP Access Manager -> APS Portal : View Consumer Detail Access Manager -> APS Portal : Change Scopes APS Portal -> ConsumerScopesAndRoles : updateConsumerScopeAssignment ConsumerScopesAndRoles -> List.Common : getEnvironmentContext List.Common -> KeystoneJS : lookupEnvironmentAndIssuerUsingWhereClause List.Common -> IdP : getOpenidFromIssuer (.well-known) List.Common -> IdP : getUma2FromIssuer (.well-known) List.Common -> List.Common : getSubjectToken ConsumerScopesAndRoles -> IdP : login ConsumerScopesAndRoles -> IdP : findByClientId (Issuer Client ID) ConsumerScopesAndRoles -> IdP : listDefaultClientScopes ConsumerScopesAndRoles -> IdP : syncClientScopes (openid.registration_endpoint) ConsumerScopesAndRoles -> APS Portal : Ack APS Portal -> Access Manager : Ack","title":"Maintain Consumer Scopes and Roles"},{"location":"releases/","text":"Releases \u00b6 2023 \u00b6 Release Date Release 2023 Jun 19 1.2.12 Minor Release 2023 Mar 14 1.2.11 Minor Release 2023 Jan 19 1.2.6 Minor Release 2022 \u00b6 Release Date Release 2022 Oct 26 1.2.5 Minor Release 2022 Sept 29 1.2.4 Minor Release 2022 Sept 1.2.3 Minor Release 2022 Aug 1.2 Major Release 2022 May 1.1 Major Release 2021 \u00b6 Release Date Release 2021 Jun 1.0 Beta Release","title":"Releases"},{"location":"releases/#releases","text":"","title":"Releases"},{"location":"releases/#2023","text":"Release Date Release 2023 Jun 19 1.2.12 Minor Release 2023 Mar 14 1.2.11 Minor Release 2023 Jan 19 1.2.6 Minor Release","title":"2023"},{"location":"releases/#2022","text":"Release Date Release 2022 Oct 26 1.2.5 Minor Release 2022 Sept 29 1.2.4 Minor Release 2022 Sept 1.2.3 Minor Release 2022 Aug 1.2 Major Release 2022 May 1.1 Major Release","title":"2022"},{"location":"releases/#2021","text":"Release Date Release 2021 Jun 1.0 Beta Release","title":"2021"},{"location":"releases/2021-jun/","text":"API Services Portal BETA is Live! \u00b6 We are happy to announce that the API Services Portal has been released into Production. A few notable points: The following applications have reached end-of-life and are now demised: ARGG : If you would like to publish an API, please follow the steps in the API Owner User Journey. KQ : Requesting access to APIs is now done via the Directory page on the API Services Portal. API Keys : API Keys provides a way for developers to generate API Keys for access to BC Gov APIs in non-production environments. This is now done via the Directory page on the API Services Portal. There will be a period of time where API Keys will remain available as we transition clients over to the new API Services Portal - link to old API Keys If you have questions or require assistance, please visit our RocketChat Channel aps-ops . Links \u00b6 API Owner User Journey","title":"2021-JUN Beta Release"},{"location":"releases/2021-jun/#api-services-portal-beta-is-live","text":"We are happy to announce that the API Services Portal has been released into Production. A few notable points: The following applications have reached end-of-life and are now demised: ARGG : If you would like to publish an API, please follow the steps in the API Owner User Journey. KQ : Requesting access to APIs is now done via the Directory page on the API Services Portal. API Keys : API Keys provides a way for developers to generate API Keys for access to BC Gov APIs in non-production environments. This is now done via the Directory page on the API Services Portal. There will be a period of time where API Keys will remain available as we transition clients over to the new API Services Portal - link to old API Keys If you have questions or require assistance, please visit our RocketChat Channel aps-ops .","title":"API Services Portal BETA is Live!"},{"location":"releases/2021-jun/#links","text":"API Owner User Journey","title":"Links"},{"location":"releases/2022-aug/","text":"API Services Portal Release 1.2 \u00b6 !!! All API Services Documentation is now available at: https://bcgov.github.io/aps-infra-platform !!! The API Services Portal has been updated with enhancements to existing features. Redesign of the user interface for Providers to manage Consumers User experience improvements have been made to how providers review, approve, or reject an access request Providers can assign labels to a Consumer, so that the Consumer can be searched by a label in the future Providers can filter Consumers by products, environments, labels, scopes, and roles. These filters allow Providers to easily categorize and find Consumers Providers can create labels for a Consumer when approving a Consumer\u2019s access Providers can edit a consumer\u2019s labels Providers can review the access a Consumer has, to determine if the access is appropriate Providers can grant additional access to an existing Consumer, in limited circumstances","title":"2022-AUG Release 1.2"},{"location":"releases/2022-aug/#api-services-portal-release-12","text":"!!! All API Services Documentation is now available at: https://bcgov.github.io/aps-infra-platform !!! The API Services Portal has been updated with enhancements to existing features. Redesign of the user interface for Providers to manage Consumers User experience improvements have been made to how providers review, approve, or reject an access request Providers can assign labels to a Consumer, so that the Consumer can be searched by a label in the future Providers can filter Consumers by products, environments, labels, scopes, and roles. These filters allow Providers to easily categorize and find Consumers Providers can create labels for a Consumer when approving a Consumer\u2019s access Providers can edit a consumer\u2019s labels Providers can review the access a Consumer has, to determine if the access is appropriate Providers can grant additional access to an existing Consumer, in limited circumstances","title":"API Services Portal Release 1.2"},{"location":"releases/2022-may/","text":"API Services Portal Release 1.1 \u00b6 !!! All API Services Documentation is now available at: https://bcgov.github.io/aps-infra-platform !!! The API Services Portal has been updated with changes that include user experience improvements, new features, and enhancements to existing features. User Experience (UX) Upgrades The following aspects of the APS Portal user experience have been modernized: API Directory \u2192 Request Access: Changed the request access flow for easier navigation Modified the user interface to promote consistency and meet accessibility standards Improved the look and feel My Access and Applications pages: Modified the user interface to promote consistency and meet accessibility standards Namespaces \u2192 Authorization Profiles: Changed the editing and creating of authorization profiles for easier navigation Modified the user interface to promote consistency and meet accessibility standards Improved the look and feel My Profile page: Added a new user interface to display user profile information New Features Organization access management (including membership and namespace assignment) #315 : Improved validation of Environment activation: Namespace must be assigned to an Organization Product dataset must belong to the same Organization Organization Group access displays on the Namespace Access page Enhancements Directory API V2 is released with the following features: Information details for each of Get Namespace Dataset, Product, Content, and Issuer Activity details at the Organization and Namespace levels Configuration for Get Gateway Services Delete option for Environment and Namespace with required (force) verification Note: Directory API V1 will reach end of life and be deprecated on October 31, 2022; at this time Directory API V1 will be unavailable and no longer supported. Cascade deletion of Namespace and/or Environment that includes #342 : Revoking of all related consumer access Revoking of Service Accounts Verifying no Gateway Services still exist Logging any activity for the deleted namespace","title":"2022-MAY Release 1.1"},{"location":"releases/2022-may/#api-services-portal-release-11","text":"!!! All API Services Documentation is now available at: https://bcgov.github.io/aps-infra-platform !!! The API Services Portal has been updated with changes that include user experience improvements, new features, and enhancements to existing features. User Experience (UX) Upgrades The following aspects of the APS Portal user experience have been modernized: API Directory \u2192 Request Access: Changed the request access flow for easier navigation Modified the user interface to promote consistency and meet accessibility standards Improved the look and feel My Access and Applications pages: Modified the user interface to promote consistency and meet accessibility standards Namespaces \u2192 Authorization Profiles: Changed the editing and creating of authorization profiles for easier navigation Modified the user interface to promote consistency and meet accessibility standards Improved the look and feel My Profile page: Added a new user interface to display user profile information New Features Organization access management (including membership and namespace assignment) #315 : Improved validation of Environment activation: Namespace must be assigned to an Organization Product dataset must belong to the same Organization Organization Group access displays on the Namespace Access page Enhancements Directory API V2 is released with the following features: Information details for each of Get Namespace Dataset, Product, Content, and Issuer Activity details at the Organization and Namespace levels Configuration for Get Gateway Services Delete option for Environment and Namespace with required (force) verification Note: Directory API V1 will reach end of life and be deprecated on October 31, 2022; at this time Directory API V1 will be unavailable and no longer supported. Cascade deletion of Namespace and/or Environment that includes #342 : Revoking of all related consumer access Revoking of Service Accounts Verifying no Gateway Services still exist Logging any activity for the deleted namespace","title":"API Services Portal Release 1.1"},{"location":"releases/2022-oct-1.2.5/","text":"API Services Portal Release 1.2.5 \u00b6 The API Services Portal has been updated with some enhancements and bug fixes. Enhancements User interface and experience improvements to the API Provider products page. Promote consistency by following the BC Government\u2019s design guidelines Easier navigation Fixes We refactored and migrated data used for IDIR authentication. This was done to increase the security of IDIR data. If an API Provider edited controls for a product and missed required information, the changes appeared successful but were not saved. This issue has been resolved by adding a warning that prompts users to enter missing information. When an API Consumer deleted an application, the application appeared to still exist because the system was not refreshing the page with the new list of applications. This issue has been fixed, and deleted applications appear deleted immediately. The system was experiencing issues with client roles, preventing API Consumers from using APIs. This issue has been resolved so that: - Roles are set properly on access approval - Roles can be modified in the Consumer Environment dialog - Roles appear in the generated Bearer Token using the credentials a Developer receives If an API Provider changed their own access permissions to a Namespace and continued to manage the Namespace, errors occurred, and re-login was required. Now, when a user updates their own permissions, the permissions are updated immediately for their current session and re-login is not required. If an API Provider created a dataset without a title, all products on the Namespace\u2019s Products page showed errors for all users. Entering a title is now mandatory so this scenario cannot occur.","title":"2022-OCT Release 1.2.5"},{"location":"releases/2022-oct-1.2.5/#api-services-portal-release-125","text":"The API Services Portal has been updated with some enhancements and bug fixes. Enhancements User interface and experience improvements to the API Provider products page. Promote consistency by following the BC Government\u2019s design guidelines Easier navigation Fixes We refactored and migrated data used for IDIR authentication. This was done to increase the security of IDIR data. If an API Provider edited controls for a product and missed required information, the changes appeared successful but were not saved. This issue has been resolved by adding a warning that prompts users to enter missing information. When an API Consumer deleted an application, the application appeared to still exist because the system was not refreshing the page with the new list of applications. This issue has been fixed, and deleted applications appear deleted immediately. The system was experiencing issues with client roles, preventing API Consumers from using APIs. This issue has been resolved so that: - Roles are set properly on access approval - Roles can be modified in the Consumer Environment dialog - Roles appear in the generated Bearer Token using the credentials a Developer receives If an API Provider changed their own access permissions to a Namespace and continued to manage the Namespace, errors occurred, and re-login was required. Now, when a user updates their own permissions, the permissions are updated immediately for their current session and re-login is not required. If an API Provider created a dataset without a title, all products on the Namespace\u2019s Products page showed errors for all users. Entering a title is now mandatory so this scenario cannot occur.","title":"API Services Portal Release 1.2.5"},{"location":"releases/2022-sept-1.2.4/","text":"API Services Portal Release 1.2.4 \u00b6 The API Services Portal has been updated with a new feature, some enhancements, and some bug fixes. Features API Providers can search past activity in a Namespace, enabling them to better serve clients and help troubleshoot issues. Enhancements Improved design considerations were added to pages with no data currently available to display. The design of the Namespace Access section for API managers has been refreshed; enhancements include grouping by access roles, inline search, and sortable tables. Fixes When viewing the details of a request, the \u201capprover\u201d shows as the name of the individual who sent the request, rather than the name of the individual who approved the request. A fix has been applied to display the correct requestor and approver names. All API Consumer names were displaying with the @idir domain, even if the API Consumer\u2019s identity provider was different. A fix has been applied to display the correct identity provider. Several formatting and sorting issues on the consumers page have been corrected.","title":"2022-SEPT Release 1.2.4"},{"location":"releases/2022-sept-1.2.4/#api-services-portal-release-124","text":"The API Services Portal has been updated with a new feature, some enhancements, and some bug fixes. Features API Providers can search past activity in a Namespace, enabling them to better serve clients and help troubleshoot issues. Enhancements Improved design considerations were added to pages with no data currently available to display. The design of the Namespace Access section for API managers has been refreshed; enhancements include grouping by access roles, inline search, and sortable tables. Fixes When viewing the details of a request, the \u201capprover\u201d shows as the name of the individual who sent the request, rather than the name of the individual who approved the request. A fix has been applied to display the correct requestor and approver names. All API Consumer names were displaying with the @idir domain, even if the API Consumer\u2019s identity provider was different. A fix has been applied to display the correct identity provider. Several formatting and sorting issues on the consumers page have been corrected.","title":"API Services Portal Release 1.2.4"},{"location":"releases/2022-sept/","text":"API Services Portal Release 1.2.3 \u00b6 The API Services Portal has been updated with a new feature: Integration with BC Services Card API consumers can now use BC Services Card for login authentication. Note: Authentication options are not interchangeable. If you choose to use BC Services Card, and were previously using an alternative authentication method (such as Business BCeID, GitHub, or IDIR), your existing account\u2019s settings and services will not be linked. We suggest that you continue using your original authentication credential.","title":"2022-SEPT Release 1.2.3"},{"location":"releases/2022-sept/#api-services-portal-release-123","text":"The API Services Portal has been updated with a new feature: Integration with BC Services Card API consumers can now use BC Services Card for login authentication. Note: Authentication options are not interchangeable. If you choose to use BC Services Card, and were previously using an alternative authentication method (such as Business BCeID, GitHub, or IDIR), your existing account\u2019s settings and services will not be linked. We suggest that you continue using your original authentication credential.","title":"API Services Portal Release 1.2.3"},{"location":"releases/2023-jan-1.2.6/","text":"API Services Portal Release 1.2.6 \u00b6 The API Services Portal has been updated with new features, enhancements, and bug fixes. New Features \u00b6 Shared IdP : This feature allows API Providers to leverage the SSO Gold-tier Keycloak cluster to manage Client Credentials without having to deal directly with the cluster. The APS team has a custom realm on this Keycloak cluster called apigw, which is administered by the API Services Portal. To use it, follow these steps . Private Routing : This feature allows API Providers to make private API endpoints, which can have security benefits. Learn more here . New Plugins Waiting Queue : Support Waiting Queue solutions, such as https://github.com/bcgov/WaitingQueue . Kong Upstream Auth Basic : Kong Plugin to add HTTP Basic Authentication to the upstream request header. Edit an application API Consumers can now edit their existing applications in the portal. Enhancements \u00b6 Added about us, privacy, accessibility, copyright, and contact us pages to the site footer User interface improvements to the Service Accounts page User interface improvements to the Gateway Services page User interface improvements to the login pages, and separate login pages created for API providers and API Consumers User interface improvements to how API Providers publish their APIs and request organization admins to approve their namespace Updated Kong from release 2.7.2 to release 2.8.3 Fixes \u00b6 Minor user interface fixes","title":"2023-JAN Release 1.2.6"},{"location":"releases/2023-jan-1.2.6/#api-services-portal-release-126","text":"The API Services Portal has been updated with new features, enhancements, and bug fixes.","title":"API Services Portal Release 1.2.6"},{"location":"releases/2023-jan-1.2.6/#new-features","text":"Shared IdP : This feature allows API Providers to leverage the SSO Gold-tier Keycloak cluster to manage Client Credentials without having to deal directly with the cluster. The APS team has a custom realm on this Keycloak cluster called apigw, which is administered by the API Services Portal. To use it, follow these steps . Private Routing : This feature allows API Providers to make private API endpoints, which can have security benefits. Learn more here . New Plugins Waiting Queue : Support Waiting Queue solutions, such as https://github.com/bcgov/WaitingQueue . Kong Upstream Auth Basic : Kong Plugin to add HTTP Basic Authentication to the upstream request header. Edit an application API Consumers can now edit their existing applications in the portal.","title":"New Features"},{"location":"releases/2023-jan-1.2.6/#enhancements","text":"Added about us, privacy, accessibility, copyright, and contact us pages to the site footer User interface improvements to the Service Accounts page User interface improvements to the Gateway Services page User interface improvements to the login pages, and separate login pages created for API providers and API Consumers User interface improvements to how API Providers publish their APIs and request organization admins to approve their namespace Updated Kong from release 2.7.2 to release 2.8.3","title":"Enhancements"},{"location":"releases/2023-jan-1.2.6/#fixes","text":"Minor user interface fixes","title":"Fixes"},{"location":"releases/2023-jun-1.2.12/","text":"API Services Portal Release 1.2.12 \u00b6 The API Services Portal has been updated with a new feature, enhancements, and bug fixes. Features \u00b6 #518 - Private Key : Added a way for clients to provide a public certificate while requesting access, and a self-serve way to update your public certificate. Enhancements \u00b6 #773 - When configuring environment services, you can drag and drop your \"available services\" into \"active services\". We added more UI feedback to this screen, so it is clear when you have dragged something into the \"active services\" area. Fixes \u00b6 #785 - In the APS portal, the Help menu contained the wrong link to the release notes page. The Help menu now contains the correct link. #789 - There was a bug that incorrectly displayed the logged in user as the owner of an Authorization Profile, even if they were not. This has been fixed, and the correct owner of the Authorization Profile is always displayed.","title":"2023-JUN Release 1.2.12"},{"location":"releases/2023-jun-1.2.12/#api-services-portal-release-1212","text":"The API Services Portal has been updated with a new feature, enhancements, and bug fixes.","title":"API Services Portal Release 1.2.12"},{"location":"releases/2023-jun-1.2.12/#features","text":"#518 - Private Key : Added a way for clients to provide a public certificate while requesting access, and a self-serve way to update your public certificate.","title":"Features"},{"location":"releases/2023-jun-1.2.12/#enhancements","text":"#773 - When configuring environment services, you can drag and drop your \"available services\" into \"active services\". We added more UI feedback to this screen, so it is clear when you have dragged something into the \"active services\" area.","title":"Enhancements"},{"location":"releases/2023-jun-1.2.12/#fixes","text":"#785 - In the APS portal, the Help menu contained the wrong link to the release notes page. The Help menu now contains the correct link. #789 - There was a bug that incorrectly displayed the logged in user as the owner of an Authorization Profile, even if they were not. This has been fixed, and the correct owner of the Authorization Profile is always displayed.","title":"Fixes"},{"location":"releases/2023-mar-1.2.11/","text":"API Services Portal Release 1.2.11 \u00b6 The API Services Portal has been updated with new features, enhancements, and bug fixes. Enhancements \u00b6 UI Improvements to the \"Namespace Access\" page UX improvements in the \"Create New Namespace\" modal Removed the documentation tab from the portal site due to it not being used, and becoming out of date Added a confirmation modal before a user can delete an application, to reduce human errors Added routing data (general information about the portal/gateway, such as number of namespaces, list of org admins, most recent logins, etc.) into our metrics dashboard in Grafana. Better Activity descriptions for gateway config changes Fixes \u00b6 Fixed a bug where environments were failing to validate, and were showing \"Unexpected error validating environment\" Fixed a bug where environments with Authorization Code flow were not able to save Fixed errors when consumer access requests were approved Fixed various bug fixes to the Organization Assignment flow Fixed a bug where Gateway Metrics were not appearing in the Portal Fixed a bug where a duplicate consumer would appear on the Ops Metrics Fixed bug where dry run gateway publish still records activity indicating an update Fixed an error that occurred when deleting a namespace","title":"2023-MAR Release 1.2.11"},{"location":"releases/2023-mar-1.2.11/#api-services-portal-release-1211","text":"The API Services Portal has been updated with new features, enhancements, and bug fixes.","title":"API Services Portal Release 1.2.11"},{"location":"releases/2023-mar-1.2.11/#enhancements","text":"UI Improvements to the \"Namespace Access\" page UX improvements in the \"Create New Namespace\" modal Removed the documentation tab from the portal site due to it not being used, and becoming out of date Added a confirmation modal before a user can delete an application, to reduce human errors Added routing data (general information about the portal/gateway, such as number of namespaces, list of org admins, most recent logins, etc.) into our metrics dashboard in Grafana. Better Activity descriptions for gateway config changes","title":"Enhancements"},{"location":"releases/2023-mar-1.2.11/#fixes","text":"Fixed a bug where environments were failing to validate, and were showing \"Unexpected error validating environment\" Fixed a bug where environments with Authorization Code flow were not able to save Fixed errors when consumer access requests were approved Fixed various bug fixes to the Organization Assignment flow Fixed a bug where Gateway Metrics were not appearing in the Portal Fixed a bug where a duplicate consumer would appear on the Ops Metrics Fixed bug where dry run gateway publish still records activity indicating an update Fixed an error that occurred when deleting a namespace","title":"Fixes"}]}